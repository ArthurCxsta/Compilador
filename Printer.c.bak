/* File generated by the BNF Converter (bnfc 2.9.5). */

/*** Pretty Printer and Abstract Syntax Viewer ***/

#include <ctype.h>   /* isspace */
#include <stddef.h>  /* size_t */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "Printer.h"

#define INDENT_WIDTH 2

int _n_;
char *buf_;
size_t cur_;
size_t buf_size;

/* You may wish to change the renderC functions */
void renderC(Char c)
{
  if (c == '{')
  {
     onEmptyLine();
     bufAppendC(c);
     _n_ = _n_ + INDENT_WIDTH;
     bufAppendC('\n');
     indent();
  }
  else if (c == '(' || c == '[')
     bufAppendC(c);
  else if (c == ')' || c == ']')
  {
     removeTrailingWhitespace();
     bufAppendC(c);
     bufAppendC(' ');
  }
  else if (c == '}')
  {
     _n_ = _n_ - INDENT_WIDTH;
     onEmptyLine();
     bufAppendC(c);
     bufAppendC('\n');
     indent();
  }
  else if (c == ',')
  {
     removeTrailingWhitespace();
     bufAppendC(c);
     bufAppendC(' ');
  }
  else if (c == ';')
  {
     removeTrailingWhitespace();
     bufAppendC(c);
     bufAppendC('\n');
     indent();
  }
  else if (c == ' ') bufAppendC(c);
  else if (c == 0) return;
  else
  {
     bufAppendC(c);
     bufAppendC(' ');
  }
}

int allIsSpace(String s)
{
  char c;
  while ((c = *s++))
    if (! isspace(c)) return 0;
  return 1;
}

void renderS(String s)
{
  if (*s) /* s[0] != '\0', string s not empty */
  {
    if (allIsSpace(s)) {
      backup();
      bufAppendS(s);
    } else {
      bufAppendS(s);
      bufAppendC(' ');
    }
  }
}

void indent(void)
{
  int n = _n_;
  while (--n >= 0)
    bufAppendC(' ');
}

void backup(void)
{
  if (cur_ && buf_[cur_ - 1] == ' ')
    buf_[--cur_] = 0;
}

void removeTrailingSpaces()
{
  while (cur_ && buf_[cur_ - 1] == ' ') --cur_;
  buf_[cur_] = 0;
}

void removeTrailingWhitespace()
{
  while (cur_ && (buf_[cur_ - 1] == ' ' || buf_[cur_ - 1] == '\n')) --cur_;
  buf_[cur_] = 0;
}

void onEmptyLine()
{
  removeTrailingSpaces();
  if (cur_ && buf_[cur_ - 1 ] != '\n') bufAppendC('\n');
  indent();
}
char *printPrograms(Programs p)
{
  _n_ = 0;
  bufReset();
  ppPrograms(p, 0);
  return buf_;
}
char *printDeclaracoes(Declaracoes p)
{
  _n_ = 0;
  bufReset();
  ppDeclaracoes(p, 0);
  return buf_;
}
char *printDeclaracao(Declaracao p)
{
  _n_ = 0;
  bufReset();
  ppDeclaracao(p, 0);
  return buf_;
}
char *printStructDecl(StructDecl p)
{
  _n_ = 0;
  bufReset();
  ppStructDecl(p, 0);
  return buf_;
}
char *printFieldDecl(FieldDecl p)
{
  _n_ = 0;
  bufReset();
  ppFieldDecl(p, 0);
  return buf_;
}
char *printPonteiraDecl(PonteiraDecl p)
{
  _n_ = 0;
  bufReset();
  ppPonteiraDecl(p, 0);
  return buf_;
}
char *printVetorDecl(VetorDecl p)
{
  _n_ = 0;
  bufReset();
  ppVetorDecl(p, 0);
  return buf_;
}
char *printInstrucoes(Instrucoes p)
{
  _n_ = 0;
  bufReset();
  ppInstrucoes(p, 0);
  return buf_;
}
char *printInstrucao(Instrucao p)
{
  _n_ = 0;
  bufReset();
  ppInstrucao(p, 0);
  return buf_;
}
char *printAtribuicao(Atribuicao p)
{
  _n_ = 0;
  bufReset();
  ppAtribuicao(p, 0);
  return buf_;
}
char *printComentario(Comentario p)
{
  _n_ = 0;
  bufReset();
  ppComentario(p, 0);
  return buf_;
}
char *printDeclaracaoSe(DeclaracaoSe p)
{
  _n_ = 0;
  bufReset();
  ppDeclaracaoSe(p, 0);
  return buf_;
}
char *printLoopPara(LoopPara p)
{
  _n_ = 0;
  bufReset();
  ppLoopPara(p, 0);
  return buf_;
}
char *printImprima(Imprima p)
{
  _n_ = 0;
  bufReset();
  ppImprima(p, 0);
  return buf_;
}
char *printEntrada(Entrada p)
{
  _n_ = 0;
  bufReset();
  ppEntrada(p, 0);
  return buf_;
}
char *printModularizacao(Modularizacao p)
{
  _n_ = 0;
  bufReset();
  ppModularizacao(p, 0);
  return buf_;
}
char *printExpressao(Expressao p)
{
  _n_ = 0;
  bufReset();
  ppExpressao(p, 0);
  return buf_;
}
char *printTermo(Termo p)
{
  _n_ = 0;
  bufReset();
  ppTermo(p, 0);
  return buf_;
}
char *printCondicao(Condicao p)
{
  _n_ = 0;
  bufReset();
  ppCondicao(p, 0);
  return buf_;
}
char *printTipo(Tipo p)
{
  _n_ = 0;
  bufReset();
  ppTipo(p, 0);
  return buf_;
}
char *printIdentificador(Identificador p)
{
  _n_ = 0;
  bufReset();
  ppIdentificador(p, 0);
  return buf_;
}
char *printInteiro(Inteiro p)
{
  _n_ = 0;
  bufReset();
  ppInteiro(p, 0);
  return buf_;
}
char *printReal(Real p)
{
  _n_ = 0;
  bufReset();
  ppReal(p, 0);
  return buf_;
}
char *printChax(Chax p)
{
  _n_ = 0;
  bufReset();
  ppChax(p, 0);
  return buf_;
}
char *printTexto(Texto p)
{
  _n_ = 0;
  bufReset();
  ppTexto(p, 0);
  return buf_;
}
char *printIdentifierLabel(IdentifierLabel p)
{
  _n_ = 0;
  bufReset();
  ppIdentifierLabel(p, 0);
  return buf_;
}
char *printTypeType(TypeType p)
{
  _n_ = 0;
  bufReset();
  ppTypeType(p, 0);
  return buf_;
}
char *printLetra(Letra p)
{
  _n_ = 0;
  bufReset();
  ppLetra(p, 0);
  return buf_;
}
char *printDigito(Digito p)
{
  _n_ = 0;
  bufReset();
  ppDigito(p, 0);
  return buf_;
}
char *printCaractere(Caractere p)
{
  _n_ = 0;
  bufReset();
  ppCaractere(p, 0);
  return buf_;
}
char *showPrograms(Programs p)
{
  _n_ = 0;
  bufReset();
  shPrograms(p);
  return buf_;
}
char *showDeclaracoes(Declaracoes p)
{
  _n_ = 0;
  bufReset();
  shDeclaracoes(p);
  return buf_;
}
char *showDeclaracao(Declaracao p)
{
  _n_ = 0;
  bufReset();
  shDeclaracao(p);
  return buf_;
}
char *showStructDecl(StructDecl p)
{
  _n_ = 0;
  bufReset();
  shStructDecl(p);
  return buf_;
}
char *showFieldDecl(FieldDecl p)
{
  _n_ = 0;
  bufReset();
  shFieldDecl(p);
  return buf_;
}
char *showPonteiraDecl(PonteiraDecl p)
{
  _n_ = 0;
  bufReset();
  shPonteiraDecl(p);
  return buf_;
}
char *showVetorDecl(VetorDecl p)
{
  _n_ = 0;
  bufReset();
  shVetorDecl(p);
  return buf_;
}
char *showInstrucoes(Instrucoes p)
{
  _n_ = 0;
  bufReset();
  shInstrucoes(p);
  return buf_;
}
char *showInstrucao(Instrucao p)
{
  _n_ = 0;
  bufReset();
  shInstrucao(p);
  return buf_;
}
char *showAtribuicao(Atribuicao p)
{
  _n_ = 0;
  bufReset();
  shAtribuicao(p);
  return buf_;
}
char *showComentario(Comentario p)
{
  _n_ = 0;
  bufReset();
  shComentario(p);
  return buf_;
}
char *showDeclaracaoSe(DeclaracaoSe p)
{
  _n_ = 0;
  bufReset();
  shDeclaracaoSe(p);
  return buf_;
}
char *showLoopPara(LoopPara p)
{
  _n_ = 0;
  bufReset();
  shLoopPara(p);
  return buf_;
}
char *showImprima(Imprima p)
{
  _n_ = 0;
  bufReset();
  shImprima(p);
  return buf_;
}
char *showEntrada(Entrada p)
{
  _n_ = 0;
  bufReset();
  shEntrada(p);
  return buf_;
}
char *showModularizacao(Modularizacao p)
{
  _n_ = 0;
  bufReset();
  shModularizacao(p);
  return buf_;
}
char *showExpressao(Expressao p)
{
  _n_ = 0;
  bufReset();
  shExpressao(p);
  return buf_;
}
char *showTermo(Termo p)
{
  _n_ = 0;
  bufReset();
  shTermo(p);
  return buf_;
}
char *showCondicao(Condicao p)
{
  _n_ = 0;
  bufReset();
  shCondicao(p);
  return buf_;
}
char *showTipo(Tipo p)
{
  _n_ = 0;
  bufReset();
  shTipo(p);
  return buf_;
}
char *showIdentificador(Identificador p)
{
  _n_ = 0;
  bufReset();
  shIdentificador(p);
  return buf_;
}
char *showInteiro(Inteiro p)
{
  _n_ = 0;
  bufReset();
  shInteiro(p);
  return buf_;
}
char *showReal(Real p)
{
  _n_ = 0;
  bufReset();
  shReal(p);
  return buf_;
}
char *showChax(Chax p)
{
  _n_ = 0;
  bufReset();
  shChax(p);
  return buf_;
}
char *showTexto(Texto p)
{
  _n_ = 0;
  bufReset();
  shTexto(p);
  return buf_;
}
char *showIdentifierLabel(IdentifierLabel p)
{
  _n_ = 0;
  bufReset();
  shIdentifierLabel(p);
  return buf_;
}
char *showTypeType(TypeType p)
{
  _n_ = 0;
  bufReset();
  shTypeType(p);
  return buf_;
}
char *showLetra(Letra p)
{
  _n_ = 0;
  bufReset();
  shLetra(p);
  return buf_;
}
char *showDigito(Digito p)
{
  _n_ = 0;
  bufReset();
  shDigito(p);
  return buf_;
}
char *showCaractere(Caractere p)
{
  _n_ = 0;
  bufReset();
  shCaractere(p);
  return buf_;
}
void ppPrograms(Programs p, int _i_)
{
  switch(p->kind)
  {
  case is_Label1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("int");
    renderS("principal");
    renderC('(');
    renderC(')');
    renderC('{');
    ppDeclaracoes(p->u.label1_.declaracoes_, 0);
    ppInstrucoes(p->u.label1_.instrucoes_, 0);
    renderS("retorne");
    ppInteiro(p->u.label1_.inteiro_, 0);
    renderC(';');
    renderC('}');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Programs!\n");
    exit(1);
  }
}

void ppDeclaracoes(Declaracoes p, int _i_)
{
  switch(p->kind)
  {
  case is_Declaracoes1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppDeclaracao(p->u.declaracoes1_.declaracao_, 0);
    ppDeclaracoes(p->u.declaracoes1_.declaracoes_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Declaracoes!\n");
    exit(1);
  }
}

void ppDeclaracao(Declaracao p, int _i_)
{
  switch(p->kind)
  {
  case is_Declaracao1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTipo(p->u.declaracao1_.tipo_, 0);
    ppIdentificador(p->u.declaracao1_.identificador_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppStructDecl(p->u.declaracao2_.structdecl_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao3:
    if (_i_ > 0) renderC(_L_PAREN);
    ppPonteiraDecl(p->u.declaracao3_.ponteiradecl_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao4:
    if (_i_ > 0) renderC(_L_PAREN);
    ppVetorDecl(p->u.declaracao4_.vetordecl_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao5:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTipo(p->u.declaracao5_.tipo_, 0);
    ppIdentificador(p->u.declaracao5_.identificador_, 0);
    renderC('=');
    ppInteiro(p->u.declaracao5_.inteiro_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao6:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTipo(p->u.declaracao6_.tipo_, 0);
    ppIdentificador(p->u.declaracao6_.identificador_, 0);
    renderC('=');
    ppReal(p->u.declaracao6_.real_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao7:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTipo(p->u.declaracao7_.tipo_, 0);
    ppIdentificador(p->u.declaracao7_.identificador_, 0);
    renderC('=');
    ppChar(p->u.declaracao7_.char_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao8:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTipo(p->u.declaracao8_.tipo_, 0);
    ppIdentificador(p->u.declaracao8_.identificador_, 0);
    renderC('=');
    ppString(p->u.declaracao8_.string_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao9:
    if (_i_ > 0) renderC(_L_PAREN);
    ppStructDecl(p->u.declaracao9_.structdecl_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao10:
    if (_i_ > 0) renderC(_L_PAREN);
    ppPonteiraDecl(p->u.declaracao10_.ponteiradecl_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Declaracao11:
    if (_i_ > 0) renderC(_L_PAREN);
    ppVetorDecl(p->u.declaracao11_.vetordecl_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Declaracao!\n");
    exit(1);
  }
}

void ppStructDecl(StructDecl p, int _i_)
{
  switch(p->kind)
  {
  case is_E:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("struct");
    ppIdentifierLabel(p->u.e_.identifierlabel_, 0);
    renderC('{');
    ppFieldDecl(p->u.e_.fielddecl_, 0);
    renderC('}');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing StructDecl!\n");
    exit(1);
  }
}

void ppFieldDecl(FieldDecl p, int _i_)
{
  switch(p->kind)
  {
  case is_F:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTypeType(p->u.f_.typetype_, 1);
    ppIdentifierLabel(p->u.f_.identifierlabel_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing FieldDecl!\n");
    exit(1);
  }
}

void ppPonteiraDecl(PonteiraDecl p, int _i_)
{
  switch(p->kind)
  {
  case is_P:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTypeType(p->u.p_.typetype_, 2);
    renderC('*');
    ppIdentifierLabel(p->u.p_.identifierlabel_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing PonteiraDecl!\n");
    exit(1);
  }
}

void ppVetorDecl(VetorDecl p, int _i_)
{
  switch(p->kind)
  {
  case is_V:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTypeType(p->u.v_.typetype_, 3);
    ppIdentifierLabel(p->u.v_.identifierlabel_, 0);
    renderC('[');
    ppInteiro(p->u.v_.inteiro_, 0);
    renderC(']');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing VetorDecl!\n");
    exit(1);
  }
}

void ppInstrucoes(Instrucoes p, int _i_)
{
  switch(p->kind)
  {
  case is_Instrucoes1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppInstrucao(p->u.instrucoes1_.instrucao_, 0);
    ppInstrucoes(p->u.instrucoes1_.instrucoes_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Instrucoes!\n");
    exit(1);
  }
}

void ppInstrucao(Instrucao p, int _i_)
{
  switch(p->kind)
  {
  case is_Instrucao1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppAtribuicao(p->u.instrucao1_.atribuicao_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Instrucao2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppModularizacao(p->u.instrucao2_.modularizacao_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Instrucao!\n");
    exit(1);
  }
}

void ppAtribuicao(Atribuicao p, int _i_)
{
  switch(p->kind)
  {
  case is_A:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdentificador(p->u.a_.identificador_, 0);
    renderC('=');
    ppExpressao(p->u.a_.expressao_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Atribuicao!\n");
    exit(1);
  }
}

void ppComentario(Comentario p, int _i_)
{
  switch(p->kind)
  {
  case is_Co:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("//");
    ppString(p->u.co_.string_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Comentario!\n");
    exit(1);
  }
}

void ppDeclaracaoSe(DeclaracaoSe p, int _i_)
{
  switch(p->kind)
  {
  case is_Label2:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("SE");
    renderC('(');
    ppExpressao(p->u.label2_.expressao_, 0);
    renderC(')');
    renderC('{');
    ppInstrucoes(p->u.label2_.instrucoes_1, 0);
    renderC('}');
    renderS("senao");
    renderC('{');
    ppInstrucoes(p->u.label2_.instrucoes_2, 0);
    renderC('}');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing DeclaracaoSe!\n");
    exit(1);
  }
}

void ppLoopPara(LoopPara p, int _i_)
{
  switch(p->kind)
  {
  case is_Label3:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("para");
    renderC('(');
    ppAtribuicao(p->u.label3_.atribuicao_1, 0);
    renderC(';');
    ppCondicao(p->u.label3_.condicao_, 0);
    renderC(';');
    ppAtribuicao(p->u.label3_.atribuicao_2, 0);
    renderC(')');
    renderC('{');
    ppInstrucoes(p->u.label3_.instrucoes_, 0);
    renderC('}');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing LoopPara!\n");
    exit(1);
  }
}

void ppImprima(Imprima p, int _i_)
{
  switch(p->kind)
  {
  case is_Label4:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("imprima");
    renderC('(');
    ppExpressao(p->u.label4_.expressao_, 0);
    renderC(')');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Imprima!\n");
    exit(1);
  }
}

void ppEntrada(Entrada p, int _i_)
{
  switch(p->kind)
  {
  case is_Label5:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("entrada");
    renderC('(');
    ppIdentificador(p->u.label5_.identificador_, 0);
    renderC(')');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Entrada!\n");
    exit(1);
  }
}

void ppModularizacao(Modularizacao p, int _i_)
{
  switch(p->kind)
  {
  case is_Label6:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("modularizacao");
    ppIdentifierLabel(p->u.label6_.identifierlabel_, 0);
    renderC('(');
    renderC(')');
    renderC('{');
    ppInstrucoes(p->u.label6_.instrucoes_, 0);
    renderC('}');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Modularizacao!\n");
    exit(1);
  }
}

void ppExpressao(Expressao p, int _i_)
{
  switch(p->kind)
  {
  case is_Expressao1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTermo(p->u.expressao1_.termo_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Expressao2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressao(p->u.expressao2_.expressao_, 0);
    renderC('+');
    ppTermo(p->u.expressao2_.termo_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Expressao3:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressao(p->u.expressao3_.expressao_, 0);
    renderC('-');
    ppTermo(p->u.expressao3_.termo_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Expressao4:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressao(p->u.expressao4_.expressao_, 0);
    renderC('*');
    ppTermo(p->u.expressao4_.termo_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Expressao5:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressao(p->u.expressao5_.expressao_, 0);
    renderC('/');
    ppTermo(p->u.expressao5_.termo_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Expressao!\n");
    exit(1);
  }
}

void ppTermo(Termo p, int _i_)
{
  switch(p->kind)
  {
  case is_Termo1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdentificador(p->u.termo1_.identificador_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Termo2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdentificador(p->u.termo2_.identificador_, 0);
    renderC('[');
    ppInteiro(p->u.termo2_.inteiro_, 0);
    renderC(']');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_TermoInteiro:
    if (_i_ > 0) renderC(_L_PAREN);
    ppInteiro(p->u.termointeiro_.inteiro_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_TermoTexto:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTexto(p->u.termotexto_.texto_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Termo3:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdentificador(p->u.termo3_.identificador_, 0);
    renderC('[');
    ppInteiro(p->u.termo3_.inteiro_, 0);
    renderC(']');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Termo!\n");
    exit(1);
  }
}

void ppCondicao(Condicao p, int _i_)
{
  switch(p->kind)
  {
  case is_Condicao1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressao(p->u.condicao1_.expressao_1, 0);
    renderC('>');
    ppExpressao(p->u.condicao1_.expressao_2, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Condicao2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressao(p->u.condicao2_.expressao_1, 0);
    renderS(">=");
    ppExpressao(p->u.condicao2_.expressao_2, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Condicao3:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressao(p->u.condicao3_.expressao_1, 0);
    renderC('<');
    ppExpressao(p->u.condicao3_.expressao_2, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Condicao4:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressao(p->u.condicao4_.expressao_1, 0);
    renderS("<=");
    ppExpressao(p->u.condicao4_.expressao_2, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Condicao5:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressao(p->u.condicao5_.expressao_1, 0);
    renderS("==");
    ppExpressao(p->u.condicao5_.expressao_2, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Condicao6:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("nao");
    ppCondicao(p->u.condicao6_.condicao_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Condicao7:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('(');
    ppCondicao(p->u.condicao7_.condicao_, 0);
    renderC(')');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Condicao8:
    if (_i_ > 0) renderC(_L_PAREN);
    ppCondicao(p->u.condicao8_.condicao_1, 0);
    renderC('e');
    ppCondicao(p->u.condicao8_.condicao_2, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Condicao9:
    if (_i_ > 0) renderC(_L_PAREN);
    ppCondicao(p->u.condicao9_.condicao_1, 0);
    renderS("ou");
    ppCondicao(p->u.condicao9_.condicao_2, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Condicao!\n");
    exit(1);
  }
}

void ppTipo(Tipo p, int _i_)
{
  switch(p->kind)
  {
  case is_Tipo_int:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("int");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Tipo_texto:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("texto");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Tipo1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("struct");
    ppIdentifierLabel(p->u.tipo1_.identifierlabel_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Tipo!\n");
    exit(1);
  }
}

void ppIdentificador(Identificador p, int _i_)
{
  switch(p->kind)
  {
  case is_Id:
    if (_i_ > 0) renderC(_L_PAREN);
    ppLetra(p->u.id_.letra_, 0);
    renderS("(Letra");
    renderC('|');
    renderS("Digito");
    renderC(')');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Identificador!\n");
    exit(1);
  }
}

void ppInteiro(Inteiro p, int _i_)
{
  switch(p->kind)
  {
  case is_In:
    if (_i_ > 0) renderC(_L_PAREN);
    ppDigito(p->u.in_.digito_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Inteiro!\n");
    exit(1);
  }
}

void ppReal(Real p, int _i_)
{
  switch(p->kind)
  {
  case is_Ir:
    if (_i_ > 0) renderC(_L_PAREN);
    ppDigito(p->u.ir_.digito_1, 0);
    renderC('.');
    ppDigito(p->u.ir_.digito_2, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Real!\n");
    exit(1);
  }
}

void ppChax(Chax p, int _i_)
{
  switch(p->kind)
  {
  case is_Ch:
    if (_i_ > 0) renderC(_L_PAREN);
    ppLetra(p->u.ch_.letra_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Chax!\n");
    exit(1);
  }
}

void ppTexto(Texto p, int _i_)
{
  switch(p->kind)
  {
  case is_It:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("Caractere*");
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Texto!\n");
    exit(1);
  }
}

void ppIdentifierLabel(IdentifierLabel p, int _i_)
{
  switch(p->kind)
  {
  case is_Ie:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdentificador(p->u.ie_.identificador_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing IdentifierLabel!\n");
    exit(1);
  }
}

void ppTypeType(TypeType p, int _i_)
{
  switch(p->kind)
  {
  case is_TypeType11:
    if (_i_ > 1) renderC(_L_PAREN);
    renderS("int");
    renderC(';');
    if (_i_ > 1) renderC(_R_PAREN);
    break;

  case is_TypeType12:
    if (_i_ > 1) renderC(_L_PAREN);
    renderS("texto");
    renderC(';');
    if (_i_ > 1) renderC(_R_PAREN);
    break;

  case is_TypeType13:
    if (_i_ > 1) renderC(_L_PAREN);
    renderS("struct");
    ppIdentifierLabel(p->u.typetype13_.identifierlabel_, 0);
    renderC(';');
    if (_i_ > 1) renderC(_R_PAREN);
    break;

  case is_TypeType21:
    if (_i_ > 2) renderC(_L_PAREN);
    renderS("int");
    renderC(';');
    if (_i_ > 2) renderC(_R_PAREN);
    break;

  case is_TypeType22:
    if (_i_ > 2) renderC(_L_PAREN);
    renderS("texto");
    renderC(';');
    if (_i_ > 2) renderC(_R_PAREN);
    break;

  case is_TypeType23:
    if (_i_ > 2) renderC(_L_PAREN);
    renderS("struct");
    ppIdentifierLabel(p->u.typetype23_.identifierlabel_, 0);
    renderC(';');
    if (_i_ > 2) renderC(_R_PAREN);
    break;

  case is_TypeType31:
    if (_i_ > 3) renderC(_L_PAREN);
    renderS("int");
    renderC(';');
    if (_i_ > 3) renderC(_R_PAREN);
    break;

  case is_TypeType32:
    if (_i_ > 3) renderC(_L_PAREN);
    renderS("texto");
    renderC(';');
    if (_i_ > 3) renderC(_R_PAREN);
    break;

  case is_TypeType33:
    if (_i_ > 3) renderC(_L_PAREN);
    renderS("struct");
    ppIdentifierLabel(p->u.typetype33_.identifierlabel_, 0);
    renderC(';');
    if (_i_ > 3) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing TypeType!\n");
    exit(1);
  }
}

void ppLetra(Letra p, int _i_)
{
  switch(p->kind)
  {
  case is_L:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("[a-zA-Z]");
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Letra!\n");
    exit(1);
  }
}

void ppDigito(Digito p, int _i_)
{
  switch(p->kind)
  {
  case is_D:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("[0-9]");
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Digito!\n");
    exit(1);
  }
}

void ppCaractere(Caractere p, int _i_)
{
  switch(p->kind)
  {
  case is_Ca:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("[a-zA-Z0-9");
    renderC(']');
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Caractere!\n");
    exit(1);
  }
}

void ppInteger(Integer n, int i)
{
  char tmp[20];
  sprintf(tmp, "%d", n);
  renderS(tmp);
}
void ppDouble(Double d, int i)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  renderS(tmp);
}
void ppChar(Char c, int i)
{
  bufAppendC('\'');
  bufEscapeC(c);
  bufAppendC('\'');
  bufAppendC(' ');
}
void ppString(String s, int i)
{
  bufAppendC('\"');
  bufEscapeS(s);
  bufAppendC('\"');
  bufAppendC(' ');
}
void ppIdent(String s, int i)
{
  renderS(s);
}

void shPrograms(Programs p)
{
  switch(p->kind)
  {
  case is_Label1:
    bufAppendC('(');

    bufAppendS("Label1");

    bufAppendC(' ');

    shDeclaracoes(p->u.label1_.declaracoes_);
  bufAppendC(' ');
    shInstrucoes(p->u.label1_.instrucoes_);
  bufAppendC(' ');
    shInteiro(p->u.label1_.inteiro_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Programs!\n");
    exit(1);
  }
}

void shDeclaracoes(Declaracoes p)
{
  switch(p->kind)
  {
  case is_Declaracoes1:
    bufAppendC('(');

    bufAppendS("Declaracoes1");

    bufAppendC(' ');

    shDeclaracao(p->u.declaracoes1_.declaracao_);
  bufAppendC(' ');
    shDeclaracoes(p->u.declaracoes1_.declaracoes_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Declaracoes!\n");
    exit(1);
  }
}

void shDeclaracao(Declaracao p)
{
  switch(p->kind)
  {
  case is_Declaracao1:
    bufAppendC('(');

    bufAppendS("Declaracao1");

    bufAppendC(' ');

    shTipo(p->u.declaracao1_.tipo_);
  bufAppendC(' ');
    shIdentificador(p->u.declaracao1_.identificador_);

    bufAppendC(')');

    break;
  case is_Declaracao2:
    bufAppendC('(');

    bufAppendS("Declaracao2");

    bufAppendC(' ');

    shStructDecl(p->u.declaracao2_.structdecl_);

    bufAppendC(')');

    break;
  case is_Declaracao3:
    bufAppendC('(');

    bufAppendS("Declaracao3");

    bufAppendC(' ');

    shPonteiraDecl(p->u.declaracao3_.ponteiradecl_);

    bufAppendC(')');

    break;
  case is_Declaracao4:
    bufAppendC('(');

    bufAppendS("Declaracao4");

    bufAppendC(' ');

    shVetorDecl(p->u.declaracao4_.vetordecl_);

    bufAppendC(')');

    break;
  case is_Declaracao5:
    bufAppendC('(');

    bufAppendS("Declaracao5");

    bufAppendC(' ');

    shTipo(p->u.declaracao5_.tipo_);
  bufAppendC(' ');
    shIdentificador(p->u.declaracao5_.identificador_);
  bufAppendC(' ');
    shInteiro(p->u.declaracao5_.inteiro_);

    bufAppendC(')');

    break;
  case is_Declaracao6:
    bufAppendC('(');

    bufAppendS("Declaracao6");

    bufAppendC(' ');

    shTipo(p->u.declaracao6_.tipo_);
  bufAppendC(' ');
    shIdentificador(p->u.declaracao6_.identificador_);
  bufAppendC(' ');
    shReal(p->u.declaracao6_.real_);

    bufAppendC(')');

    break;
  case is_Declaracao7:
    bufAppendC('(');

    bufAppendS("Declaracao7");

    bufAppendC(' ');

    shTipo(p->u.declaracao7_.tipo_);
  bufAppendC(' ');
    shIdentificador(p->u.declaracao7_.identificador_);
  bufAppendC(' ');
    shChar(p->u.declaracao7_.char_);

    bufAppendC(')');

    break;
  case is_Declaracao8:
    bufAppendC('(');

    bufAppendS("Declaracao8");

    bufAppendC(' ');

    shTipo(p->u.declaracao8_.tipo_);
  bufAppendC(' ');
    shIdentificador(p->u.declaracao8_.identificador_);
  bufAppendC(' ');
    shString(p->u.declaracao8_.string_);

    bufAppendC(')');

    break;
  case is_Declaracao9:
    bufAppendC('(');

    bufAppendS("Declaracao9");

    bufAppendC(' ');

    shStructDecl(p->u.declaracao9_.structdecl_);

    bufAppendC(')');

    break;
  case is_Declaracao10:
    bufAppendC('(');

    bufAppendS("Declaracao10");

    bufAppendC(' ');

    shPonteiraDecl(p->u.declaracao10_.ponteiradecl_);

    bufAppendC(')');

    break;
  case is_Declaracao11:
    bufAppendC('(');

    bufAppendS("Declaracao11");

    bufAppendC(' ');

    shVetorDecl(p->u.declaracao11_.vetordecl_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Declaracao!\n");
    exit(1);
  }
}

void shStructDecl(StructDecl p)
{
  switch(p->kind)
  {
  case is_E:
    bufAppendC('(');

    bufAppendS("E");

    bufAppendC(' ');

    shIdentifierLabel(p->u.e_.identifierlabel_);
  bufAppendC(' ');
    shFieldDecl(p->u.e_.fielddecl_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing StructDecl!\n");
    exit(1);
  }
}

void shFieldDecl(FieldDecl p)
{
  switch(p->kind)
  {
  case is_F:
    bufAppendC('(');

    bufAppendS("F");

    bufAppendC(' ');

    shTypeType(p->u.f_.typetype_);
  bufAppendC(' ');
    shIdentifierLabel(p->u.f_.identifierlabel_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing FieldDecl!\n");
    exit(1);
  }
}

void shPonteiraDecl(PonteiraDecl p)
{
  switch(p->kind)
  {
  case is_P:
    bufAppendC('(');

    bufAppendS("P");

    bufAppendC(' ');

    shTypeType(p->u.p_.typetype_);
  bufAppendC(' ');
    shIdentifierLabel(p->u.p_.identifierlabel_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing PonteiraDecl!\n");
    exit(1);
  }
}

void shVetorDecl(VetorDecl p)
{
  switch(p->kind)
  {
  case is_V:
    bufAppendC('(');

    bufAppendS("V");

    bufAppendC(' ');

    shTypeType(p->u.v_.typetype_);
  bufAppendC(' ');
    shIdentifierLabel(p->u.v_.identifierlabel_);
  bufAppendC(' ');
    shInteiro(p->u.v_.inteiro_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing VetorDecl!\n");
    exit(1);
  }
}

void shInstrucoes(Instrucoes p)
{
  switch(p->kind)
  {
  case is_Instrucoes1:
    bufAppendC('(');

    bufAppendS("Instrucoes1");

    bufAppendC(' ');

    shInstrucao(p->u.instrucoes1_.instrucao_);
  bufAppendC(' ');
    shInstrucoes(p->u.instrucoes1_.instrucoes_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Instrucoes!\n");
    exit(1);
  }
}

void shInstrucao(Instrucao p)
{
  switch(p->kind)
  {
  case is_Instrucao1:
    bufAppendC('(');

    bufAppendS("Instrucao1");

    bufAppendC(' ');

    shAtribuicao(p->u.instrucao1_.atribuicao_);

    bufAppendC(')');

    break;
  case is_Instrucao2:
    bufAppendC('(');

    bufAppendS("Instrucao2");

    bufAppendC(' ');

    shModularizacao(p->u.instrucao2_.modularizacao_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Instrucao!\n");
    exit(1);
  }
}

void shAtribuicao(Atribuicao p)
{
  switch(p->kind)
  {
  case is_A:
    bufAppendC('(');

    bufAppendS("A");

    bufAppendC(' ');

    shIdentificador(p->u.a_.identificador_);
  bufAppendC(' ');
    shExpressao(p->u.a_.expressao_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Atribuicao!\n");
    exit(1);
  }
}

void shComentario(Comentario p)
{
  switch(p->kind)
  {
  case is_Co:
    bufAppendC('(');

    bufAppendS("Co");

    bufAppendC(' ');

    shString(p->u.co_.string_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Comentario!\n");
    exit(1);
  }
}

void shDeclaracaoSe(DeclaracaoSe p)
{
  switch(p->kind)
  {
  case is_Label2:
    bufAppendC('(');

    bufAppendS("Label2");

    bufAppendC(' ');

    shExpressao(p->u.label2_.expressao_);
  bufAppendC(' ');
    shInstrucoes(p->u.label2_.instrucoes_1);
  bufAppendC(' ');
    shInstrucoes(p->u.label2_.instrucoes_2);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing DeclaracaoSe!\n");
    exit(1);
  }
}

void shLoopPara(LoopPara p)
{
  switch(p->kind)
  {
  case is_Label3:
    bufAppendC('(');

    bufAppendS("Label3");

    bufAppendC(' ');

    shAtribuicao(p->u.label3_.atribuicao_1);
  bufAppendC(' ');
    shCondicao(p->u.label3_.condicao_);
  bufAppendC(' ');
    shAtribuicao(p->u.label3_.atribuicao_2);
  bufAppendC(' ');
    shInstrucoes(p->u.label3_.instrucoes_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing LoopPara!\n");
    exit(1);
  }
}

void shImprima(Imprima p)
{
  switch(p->kind)
  {
  case is_Label4:
    bufAppendC('(');

    bufAppendS("Label4");

    bufAppendC(' ');

    shExpressao(p->u.label4_.expressao_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Imprima!\n");
    exit(1);
  }
}

void shEntrada(Entrada p)
{
  switch(p->kind)
  {
  case is_Label5:
    bufAppendC('(');

    bufAppendS("Label5");

    bufAppendC(' ');

    shIdentificador(p->u.label5_.identificador_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Entrada!\n");
    exit(1);
  }
}

void shModularizacao(Modularizacao p)
{
  switch(p->kind)
  {
  case is_Label6:
    bufAppendC('(');

    bufAppendS("Label6");

    bufAppendC(' ');

    shIdentifierLabel(p->u.label6_.identifierlabel_);
  bufAppendC(' ');
    shInstrucoes(p->u.label6_.instrucoes_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Modularizacao!\n");
    exit(1);
  }
}

void shExpressao(Expressao p)
{
  switch(p->kind)
  {
  case is_Expressao1:
    bufAppendC('(');

    bufAppendS("Expressao1");

    bufAppendC(' ');

    shTermo(p->u.expressao1_.termo_);

    bufAppendC(')');

    break;
  case is_Expressao2:
    bufAppendC('(');

    bufAppendS("Expressao2");

    bufAppendC(' ');

    shExpressao(p->u.expressao2_.expressao_);
  bufAppendC(' ');
    shTermo(p->u.expressao2_.termo_);

    bufAppendC(')');

    break;
  case is_Expressao3:
    bufAppendC('(');

    bufAppendS("Expressao3");

    bufAppendC(' ');

    shExpressao(p->u.expressao3_.expressao_);
  bufAppendC(' ');
    shTermo(p->u.expressao3_.termo_);

    bufAppendC(')');

    break;
  case is_Expressao4:
    bufAppendC('(');

    bufAppendS("Expressao4");

    bufAppendC(' ');

    shExpressao(p->u.expressao4_.expressao_);
  bufAppendC(' ');
    shTermo(p->u.expressao4_.termo_);

    bufAppendC(')');

    break;
  case is_Expressao5:
    bufAppendC('(');

    bufAppendS("Expressao5");

    bufAppendC(' ');

    shExpressao(p->u.expressao5_.expressao_);
  bufAppendC(' ');
    shTermo(p->u.expressao5_.termo_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Expressao!\n");
    exit(1);
  }
}

void shTermo(Termo p)
{
  switch(p->kind)
  {
  case is_Termo1:
    bufAppendC('(');

    bufAppendS("Termo1");

    bufAppendC(' ');

    shIdentificador(p->u.termo1_.identificador_);

    bufAppendC(')');

    break;
  case is_Termo2:
    bufAppendC('(');

    bufAppendS("Termo2");

    bufAppendC(' ');

    shIdentificador(p->u.termo2_.identificador_);
  bufAppendC(' ');
    shInteiro(p->u.termo2_.inteiro_);

    bufAppendC(')');

    break;
  case is_TermoInteiro:
    bufAppendC('(');

    bufAppendS("TermoInteiro");

    bufAppendC(' ');

    shInteiro(p->u.termointeiro_.inteiro_);

    bufAppendC(')');

    break;
  case is_TermoTexto:
    bufAppendC('(');

    bufAppendS("TermoTexto");

    bufAppendC(' ');

    shTexto(p->u.termotexto_.texto_);

    bufAppendC(')');

    break;
  case is_Termo3:
    bufAppendC('(');

    bufAppendS("Termo3");

    bufAppendC(' ');

    shIdentificador(p->u.termo3_.identificador_);
  bufAppendC(' ');
    shInteiro(p->u.termo3_.inteiro_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Termo!\n");
    exit(1);
  }
}

void shCondicao(Condicao p)
{
  switch(p->kind)
  {
  case is_Condicao1:
    bufAppendC('(');

    bufAppendS("Condicao1");

    bufAppendC(' ');

    shExpressao(p->u.condicao1_.expressao_1);
  bufAppendC(' ');
    shExpressao(p->u.condicao1_.expressao_2);

    bufAppendC(')');

    break;
  case is_Condicao2:
    bufAppendC('(');

    bufAppendS("Condicao2");

    bufAppendC(' ');

    shExpressao(p->u.condicao2_.expressao_1);
  bufAppendC(' ');
    shExpressao(p->u.condicao2_.expressao_2);

    bufAppendC(')');

    break;
  case is_Condicao3:
    bufAppendC('(');

    bufAppendS("Condicao3");

    bufAppendC(' ');

    shExpressao(p->u.condicao3_.expressao_1);
  bufAppendC(' ');
    shExpressao(p->u.condicao3_.expressao_2);

    bufAppendC(')');

    break;
  case is_Condicao4:
    bufAppendC('(');

    bufAppendS("Condicao4");

    bufAppendC(' ');

    shExpressao(p->u.condicao4_.expressao_1);
  bufAppendC(' ');
    shExpressao(p->u.condicao4_.expressao_2);

    bufAppendC(')');

    break;
  case is_Condicao5:
    bufAppendC('(');

    bufAppendS("Condicao5");

    bufAppendC(' ');

    shExpressao(p->u.condicao5_.expressao_1);
  bufAppendC(' ');
    shExpressao(p->u.condicao5_.expressao_2);

    bufAppendC(')');

    break;
  case is_Condicao6:
    bufAppendC('(');

    bufAppendS("Condicao6");

    bufAppendC(' ');

    shCondicao(p->u.condicao6_.condicao_);

    bufAppendC(')');

    break;
  case is_Condicao7:
    bufAppendC('(');

    bufAppendS("Condicao7");

    bufAppendC(' ');

    shCondicao(p->u.condicao7_.condicao_);

    bufAppendC(')');

    break;
  case is_Condicao8:
    bufAppendC('(');

    bufAppendS("Condicao8");

    bufAppendC(' ');

    shCondicao(p->u.condicao8_.condicao_1);
  bufAppendC(' ');
    shCondicao(p->u.condicao8_.condicao_2);

    bufAppendC(')');

    break;
  case is_Condicao9:
    bufAppendC('(');

    bufAppendS("Condicao9");

    bufAppendC(' ');

    shCondicao(p->u.condicao9_.condicao_1);
  bufAppendC(' ');
    shCondicao(p->u.condicao9_.condicao_2);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Condicao!\n");
    exit(1);
  }
}

void shTipo(Tipo p)
{
  switch(p->kind)
  {
  case is_Tipo_int:

    bufAppendS("Tipo_int");




    break;
  case is_Tipo_texto:

    bufAppendS("Tipo_texto");




    break;
  case is_Tipo1:
    bufAppendC('(');

    bufAppendS("Tipo1");

    bufAppendC(' ');

    shIdentifierLabel(p->u.tipo1_.identifierlabel_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Tipo!\n");
    exit(1);
  }
}

void shIdentificador(Identificador p)
{
  switch(p->kind)
  {
  case is_Id:
    bufAppendC('(');

    bufAppendS("Id");

    bufAppendC(' ');

    shLetra(p->u.id_.letra_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Identificador!\n");
    exit(1);
  }
}

void shInteiro(Inteiro p)
{
  switch(p->kind)
  {
  case is_In:
    bufAppendC('(');

    bufAppendS("In");

    bufAppendC(' ');

    shDigito(p->u.in_.digito_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Inteiro!\n");
    exit(1);
  }
}

void shReal(Real p)
{
  switch(p->kind)
  {
  case is_Ir:
    bufAppendC('(');

    bufAppendS("Ir");

    bufAppendC(' ');

    shDigito(p->u.ir_.digito_1);
  bufAppendC(' ');
    shDigito(p->u.ir_.digito_2);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Real!\n");
    exit(1);
  }
}

void shChax(Chax p)
{
  switch(p->kind)
  {
  case is_Ch:
    bufAppendC('(');

    bufAppendS("Ch");

    bufAppendC(' ');

    shLetra(p->u.ch_.letra_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Chax!\n");
    exit(1);
  }
}

void shTexto(Texto p)
{
  switch(p->kind)
  {
  case is_It:

    bufAppendS("It");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Texto!\n");
    exit(1);
  }
}

void shIdentifierLabel(IdentifierLabel p)
{
  switch(p->kind)
  {
  case is_Ie:
    bufAppendC('(');

    bufAppendS("Ie");

    bufAppendC(' ');

    shIdentificador(p->u.ie_.identificador_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing IdentifierLabel!\n");
    exit(1);
  }
}

void shTypeType(TypeType p)
{
  switch(p->kind)
  {
  case is_TypeType11:

    bufAppendS("TypeType11");




    break;
  case is_TypeType12:

    bufAppendS("TypeType12");




    break;
  case is_TypeType13:
    bufAppendC('(');

    bufAppendS("TypeType13");

    bufAppendC(' ');

    shIdentifierLabel(p->u.typetype13_.identifierlabel_);

    bufAppendC(')');

    break;
  case is_TypeType21:

    bufAppendS("TypeType21");




    break;
  case is_TypeType22:

    bufAppendS("TypeType22");




    break;
  case is_TypeType23:
    bufAppendC('(');

    bufAppendS("TypeType23");

    bufAppendC(' ');

    shIdentifierLabel(p->u.typetype23_.identifierlabel_);

    bufAppendC(')');

    break;
  case is_TypeType31:

    bufAppendS("TypeType31");




    break;
  case is_TypeType32:

    bufAppendS("TypeType32");




    break;
  case is_TypeType33:
    bufAppendC('(');

    bufAppendS("TypeType33");

    bufAppendC(' ');

    shIdentifierLabel(p->u.typetype33_.identifierlabel_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing TypeType!\n");
    exit(1);
  }
}

void shLetra(Letra p)
{
  switch(p->kind)
  {
  case is_L:

    bufAppendS("L");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Letra!\n");
    exit(1);
  }
}

void shDigito(Digito p)
{
  switch(p->kind)
  {
  case is_D:

    bufAppendS("D");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Digito!\n");
    exit(1);
  }
}

void shCaractere(Caractere p)
{
  switch(p->kind)
  {
  case is_Ca:

    bufAppendS("Ca");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Caractere!\n");
    exit(1);
  }
}

void shInteger(Integer i)
{
  char tmp[20];
  sprintf(tmp, "%d", i);
  bufAppendS(tmp);
}
void shDouble(Double d)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  bufAppendS(tmp);
}
void shChar(Char c)
{
  bufAppendC('\'');
  bufEscapeC(c);
  bufAppendC('\'');
}
void shString(String s)
{
  bufAppendC('\"');
  bufEscapeS(s);
  bufAppendC('\"');
}
void shIdent(String s)
{
  bufAppendC('\"');
  bufAppendS(s);
  bufAppendC('\"');
}

void bufEscapeS(const char *s)
{
  if (s) while (*s) bufEscapeC(*s++);
}
void bufEscapeC(const char c)
{
  switch(c)
  {
    case '\f': bufAppendS("\\f" ); break;
    case '\n': bufAppendS("\\n" ); break;
    case '\r': bufAppendS("\\r" ); break;
    case '\t': bufAppendS("\\t" ); break;
    case '\v': bufAppendS("\\v" ); break;
    case '\\': bufAppendS("\\\\"); break;
    case '\'': bufAppendS("\\'" ); break;
    case '\"': bufAppendS("\\\""); break;
    default: bufAppendC(c);
  }
}

void bufAppendS(const char *s)
{
  size_t len = strlen(s);
  size_t n;
  while (cur_ + len >= buf_size)
  {
    buf_size *= 2; /* Double the buffer size */
    resizeBuffer();
  }
  for(n = 0; n < len; n++)
  {
    buf_[cur_ + n] = s[n];
  }
  cur_ += len;
  buf_[cur_] = 0;
}
void bufAppendC(const char c)
{
  if (cur_ + 1 >= buf_size)
  {
    buf_size *= 2; /* Double the buffer size */
    resizeBuffer();
  }
  buf_[cur_] = c;
  cur_++;
  buf_[cur_] = 0;
}
void bufReset(void)
{
  cur_ = 0;
  buf_size = BUFFER_INITIAL;
  resizeBuffer();
  memset(buf_, 0, buf_size);
}
void resizeBuffer(void)
{
  char *temp = (char *) malloc(buf_size);
  if (!temp)
  {
    fprintf(stderr, "Error: Out of memory while attempting to grow buffer!\n");
    exit(1);
  }
  if (buf_)
  {
    strncpy(temp, buf_, buf_size); /* peteg: strlcpy is safer, but not POSIX/ISO C. */
    free(buf_);
  }
  buf_ = temp;
}
char *buf_;
size_t cur_, buf_size;

