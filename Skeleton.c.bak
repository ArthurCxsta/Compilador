/* File generated by the BNF Converter (bnfc 2.9.5). */

/*** Visitor Traversal Skeleton. ***/
/* This traverses the abstract syntax tree.
   To use, copy Skeleton.h and Skeleton.c to
   new files. */

#include <stdlib.h>
#include <stdio.h>

#include "Skeleton.h"

void visitProgram(Program p)
{
  switch(p->kind)
  {
  case is_Label1:
    /* Code for Label1 Goes Here */
    visitDeclaracoes(p->u.label1_.declaracoes_);
    visitInstrucoes(p->u.label1_.instrucoes_);
    visitInteiro(p->u.label1_.inteiro_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Program!\n");
    exit(1);
  }
}

void visitDeclaracoes(Declaracoes p)
{
  switch(p->kind)
  {
  case is_Declaracoes1:
    /* Code for Declaracoes1 Goes Here */
    visitDeclaracao(p->u.declaracoes1_.declaracao_);
    visitDeclaracoes(p->u.declaracoes1_.declaracoes_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Declaracoes!\n");
    exit(1);
  }
}

void visitDeclaracao(Declaracao p)
{
  switch(p->kind)
  {
  case is_Declaracao1:
    /* Code for Declaracao1 Goes Here */
    visitTipo(p->u.declaracao1_.tipo_);
    visitIdentificador(p->u.declaracao1_.identificador_);
    break;
  case is_Declaracao2:
    /* Code for Declaracao2 Goes Here */
    visitStructDecl(p->u.declaracao2_.structdecl_);
    break;
  case is_Declaracao3:
    /* Code for Declaracao3 Goes Here */
    visitPonteiraDecl(p->u.declaracao3_.ponteiradecl_);
    break;
  case is_Declaracao4:
    /* Code for Declaracao4 Goes Here */
    visitVetorDecl(p->u.declaracao4_.vetordecl_);
    break;
  case is_Declaracao5:
    /* Code for Declaracao5 Goes Here */
    visitTipo(p->u.declaracao5_.tipo_);
    visitIdentificador(p->u.declaracao5_.identificador_);
    visitInteiro(p->u.declaracao5_.inteiro_);
    break;
  case is_Declaracao6:
    /* Code for Declaracao6 Goes Here */
    visitTipo(p->u.declaracao6_.tipo_);
    visitIdentificador(p->u.declaracao6_.identificador_);
    visitReal(p->u.declaracao6_.real_);
    break;
  case is_Declaracao7:
    /* Code for Declaracao7 Goes Here */
    visitTipo(p->u.declaracao7_.tipo_);
    visitIdentificador(p->u.declaracao7_.identificador_);
    visitChar(p->u.declaracao7_.char_);
    break;
  case is_Declaracao8:
    /* Code for Declaracao8 Goes Here */
    visitTipo(p->u.declaracao8_.tipo_);
    visitIdentificador(p->u.declaracao8_.identificador_);
    visitString(p->u.declaracao8_.string_);
    break;
  case is_Declaracao9:
    /* Code for Declaracao9 Goes Here */
    visitStructDecl(p->u.declaracao9_.structdecl_);
    break;
  case is_Declaracao10:
    /* Code for Declaracao10 Goes Here */
    visitPonteiraDecl(p->u.declaracao10_.ponteiradecl_);
    break;
  case is_Declaracao11:
    /* Code for Declaracao11 Goes Here */
    visitVetorDecl(p->u.declaracao11_.vetordecl_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Declaracao!\n");
    exit(1);
  }
}

void visitStructDecl(StructDecl p)
{
  switch(p->kind)
  {
  case is_E:
    /* Code for E Goes Here */
    visitIdentifierLabel(p->u.e_.identifierlabel_);
    visitFieldDecl(p->u.e_.fielddecl_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing StructDecl!\n");
    exit(1);
  }
}

void visitFieldDecl(FieldDecl p)
{
  switch(p->kind)
  {
  case is_F:
    /* Code for F Goes Here */
    visitTypeType(p->u.f_.typetype_);
    visitIdentifierLabel(p->u.f_.identifierlabel_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing FieldDecl!\n");
    exit(1);
  }
}

void visitPonteiraDecl(PonteiraDecl p)
{
  switch(p->kind)
  {
  case is_P:
    /* Code for P Goes Here */
    visitTypeType(p->u.p_.typetype_);
    visitIdentifierLabel(p->u.p_.identifierlabel_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing PonteiraDecl!\n");
    exit(1);
  }
}

void visitVetorDecl(VetorDecl p)
{
  switch(p->kind)
  {
  case is_V:
    /* Code for V Goes Here */
    visitTypeType(p->u.v_.typetype_);
    visitIdentifierLabel(p->u.v_.identifierlabel_);
    visitInteiro(p->u.v_.inteiro_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing VetorDecl!\n");
    exit(1);
  }
}

void visitInstrucoes(Instrucoes p)
{
  switch(p->kind)
  {
  case is_Instrucoes1:
    /* Code for Instrucoes1 Goes Here */
    visitInstrucao(p->u.instrucoes1_.instrucao_);
    visitInstrucoes(p->u.instrucoes1_.instrucoes_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Instrucoes!\n");
    exit(1);
  }
}

void visitInstrucao(Instrucao p)
{
  switch(p->kind)
  {
  case is_Instrucao1:
    /* Code for Instrucao1 Goes Here */
    visitAtribuicao(p->u.instrucao1_.atribuicao_);
    break;
  case is_Instrucao2:
    /* Code for Instrucao2 Goes Here */
    visitModularizacao(p->u.instrucao2_.modularizacao_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Instrucao!\n");
    exit(1);
  }
}

void visitAtribuicao(Atribuicao p)
{
  switch(p->kind)
  {
  case is_A:
    /* Code for A Goes Here */
    visitIdentificador(p->u.a_.identificador_);
    visitExpressao(p->u.a_.expressao_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Atribuicao!\n");
    exit(1);
  }
}

void visitComentario(Comentario p)
{
  switch(p->kind)
  {
  case is_Co:
    /* Code for Co Goes Here */
    visitString(p->u.co_.string_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Comentario!\n");
    exit(1);
  }
}

void visitDeclaracaoSe(DeclaracaoSe p)
{
  switch(p->kind)
  {
  case is_Label2:
    /* Code for Label2 Goes Here */
    visitExpressao(p->u.label2_.expressao_);
    visitInstrucoes(p->u.label2_.instrucoes_1);
    visitInstrucoes(p->u.label2_.instrucoes_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing DeclaracaoSe!\n");
    exit(1);
  }
}

void visitLoopPara(LoopPara p)
{
  switch(p->kind)
  {
  case is_Label3:
    /* Code for Label3 Goes Here */
    visitAtribuicao(p->u.label3_.atribuicao_1);
    visitCondicao(p->u.label3_.condicao_);
    visitAtribuicao(p->u.label3_.atribuicao_2);
    visitInstrucoes(p->u.label3_.instrucoes_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing LoopPara!\n");
    exit(1);
  }
}

void visitImprima(Imprima p)
{
  switch(p->kind)
  {
  case is_Label4:
    /* Code for Label4 Goes Here */
    visitExpressao(p->u.label4_.expressao_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Imprima!\n");
    exit(1);
  }
}

void visitEntrada(Entrada p)
{
  switch(p->kind)
  {
  case is_Label5:
    /* Code for Label5 Goes Here */
    visitIdentificador(p->u.label5_.identificador_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Entrada!\n");
    exit(1);
  }
}

void visitModularizacao(Modularizacao p)
{
  switch(p->kind)
  {
  case is_Label6:
    /* Code for Label6 Goes Here */
    visitIdentifierLabel(p->u.label6_.identifierlabel_);
    visitInstrucoes(p->u.label6_.instrucoes_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Modularizacao!\n");
    exit(1);
  }
}

void visitExpressao(Expressao p)
{
  switch(p->kind)
  {
  case is_Expressao1:
    /* Code for Expressao1 Goes Here */
    visitTermo(p->u.expressao1_.termo_);
    break;
  case is_Expressao2:
    /* Code for Expressao2 Goes Here */
    visitExpressao(p->u.expressao2_.expressao_);
    visitTermo(p->u.expressao2_.termo_);
    break;
  case is_Expressao3:
    /* Code for Expressao3 Goes Here */
    visitExpressao(p->u.expressao3_.expressao_);
    visitTermo(p->u.expressao3_.termo_);
    break;
  case is_Expressao4:
    /* Code for Expressao4 Goes Here */
    visitExpressao(p->u.expressao4_.expressao_);
    visitTermo(p->u.expressao4_.termo_);
    break;
  case is_Expressao5:
    /* Code for Expressao5 Goes Here */
    visitExpressao(p->u.expressao5_.expressao_);
    visitTermo(p->u.expressao5_.termo_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Expressao!\n");
    exit(1);
  }
}

void visitTermo(Termo p)
{
  switch(p->kind)
  {
  case is_Termo1:
    /* Code for Termo1 Goes Here */
    visitIdentificador(p->u.termo1_.identificador_);
    break;
  case is_Termo2:
    /* Code for Termo2 Goes Here */
    visitIdentificador(p->u.termo2_.identificador_);
    visitInteiro(p->u.termo2_.inteiro_);
    break;
  case is_TermoInteiro:
    /* Code for TermoInteiro Goes Here */
    visitInteiro(p->u.termointeiro_.inteiro_);
    break;
  case is_TermoTexto:
    /* Code for TermoTexto Goes Here */
    visitTexto(p->u.termotexto_.texto_);
    break;
  case is_Termo3:
    /* Code for Termo3 Goes Here */
    visitIdentificador(p->u.termo3_.identificador_);
    visitInteiro(p->u.termo3_.inteiro_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Termo!\n");
    exit(1);
  }
}

void visitCondicao(Condicao p)
{
  switch(p->kind)
  {
  case is_Condicao1:
    /* Code for Condicao1 Goes Here */
    visitExpressao(p->u.condicao1_.expressao_1);
    visitExpressao(p->u.condicao1_.expressao_2);
    break;
  case is_Condicao2:
    /* Code for Condicao2 Goes Here */
    visitExpressao(p->u.condicao2_.expressao_1);
    visitExpressao(p->u.condicao2_.expressao_2);
    break;
  case is_Condicao3:
    /* Code for Condicao3 Goes Here */
    visitExpressao(p->u.condicao3_.expressao_1);
    visitExpressao(p->u.condicao3_.expressao_2);
    break;
  case is_Condicao4:
    /* Code for Condicao4 Goes Here */
    visitExpressao(p->u.condicao4_.expressao_1);
    visitExpressao(p->u.condicao4_.expressao_2);
    break;
  case is_Condicao5:
    /* Code for Condicao5 Goes Here */
    visitExpressao(p->u.condicao5_.expressao_1);
    visitExpressao(p->u.condicao5_.expressao_2);
    break;
  case is_Condicao6:
    /* Code for Condicao6 Goes Here */
    visitCondicao(p->u.condicao6_.condicao_);
    break;
  case is_Condicao7:
    /* Code for Condicao7 Goes Here */
    visitCondicao(p->u.condicao7_.condicao_);
    break;
  case is_Condicao8:
    /* Code for Condicao8 Goes Here */
    visitCondicao(p->u.condicao8_.condicao_1);
    visitCondicao(p->u.condicao8_.condicao_2);
    break;
  case is_Condicao9:
    /* Code for Condicao9 Goes Here */
    visitCondicao(p->u.condicao9_.condicao_1);
    visitCondicao(p->u.condicao9_.condicao_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Condicao!\n");
    exit(1);
  }
}

void visitTipo(Tipo p)
{
  switch(p->kind)
  {
  case is_Tipo_int:
    /* Code for Tipo_int Goes Here */
    break;
  case is_Tipo_texto:
    /* Code for Tipo_texto Goes Here */
    break;
  case is_Tipo1:
    /* Code for Tipo1 Goes Here */
    visitIdentifierLabel(p->u.tipo1_.identifierlabel_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Tipo!\n");
    exit(1);
  }
}

void visitIdentificador(Identificador p)
{
  switch(p->kind)
  {
  case is_Id:
    /* Code for Id Goes Here */
    visitLetra(p->u.id_.letra_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Identificador!\n");
    exit(1);
  }
}

void visitInteiro(Inteiro p)
{
  switch(p->kind)
  {
  case is_In:
    /* Code for In Goes Here */
    visitDigito(p->u.in_.digito_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Inteiro!\n");
    exit(1);
  }
}

void visitReal(Real p)
{
  switch(p->kind)
  {
  case is_Ir:
    /* Code for Ir Goes Here */
    visitDigito(p->u.ir_.digito_1);
    visitDigito(p->u.ir_.digito_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Real!\n");
    exit(1);
  }
}

void visitChax(Chax p)
{
  switch(p->kind)
  {
  case is_Ch:
    /* Code for Ch Goes Here */
    visitLetra(p->u.ch_.letra_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Chax!\n");
    exit(1);
  }
}

void visitTexto(Texto p)
{
  switch(p->kind)
  {
  case is_It:
    /* Code for It Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Texto!\n");
    exit(1);
  }
}

void visitIdentifierLabel(IdentifierLabel p)
{
  switch(p->kind)
  {
  case is_Ie:
    /* Code for Ie Goes Here */
    visitIdentificador(p->u.ie_.identificador_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing IdentifierLabel!\n");
    exit(1);
  }
}

void visitTypeType(TypeType p)
{
  switch(p->kind)
  {
  case is_TypeType11:
    /* Code for TypeType11 Goes Here */
    break;
  case is_TypeType12:
    /* Code for TypeType12 Goes Here */
    break;
  case is_TypeType13:
    /* Code for TypeType13 Goes Here */
    visitIdentifierLabel(p->u.typetype13_.identifierlabel_);
    break;
  case is_TypeType21:
    /* Code for TypeType21 Goes Here */
    break;
  case is_TypeType22:
    /* Code for TypeType22 Goes Here */
    break;
  case is_TypeType23:
    /* Code for TypeType23 Goes Here */
    visitIdentifierLabel(p->u.typetype23_.identifierlabel_);
    break;
  case is_TypeType31:
    /* Code for TypeType31 Goes Here */
    break;
  case is_TypeType32:
    /* Code for TypeType32 Goes Here */
    break;
  case is_TypeType33:
    /* Code for TypeType33 Goes Here */
    visitIdentifierLabel(p->u.typetype33_.identifierlabel_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing TypeType!\n");
    exit(1);
  }
}

void visitLetra(Letra p)
{
  switch(p->kind)
  {
  case is_L:
    /* Code for L Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Letra!\n");
    exit(1);
  }
}

void visitDigito(Digito p)
{
  switch(p->kind)
  {
  case is_D:
    /* Code for D Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Digito!\n");
    exit(1);
  }
}

void visitCaractere(Caractere p)
{
  switch(p->kind)
  {
  case is_Ca:
    /* Code for Ca Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Caractere!\n");
    exit(1);
  }
}

void visitIdent(Ident i)
{
  /* Code for Ident Goes Here */
}
void visitInteger(Integer i)
{
  /* Code for Integer Goes Here */
}
void visitDouble(Double d)
{
  /* Code for Double Goes Here */
}
void visitChar(Char c)
{
  /* Code for Char Goes Here */
}
void visitString(String s)
{
  /* Code for String Goes Here */
}

