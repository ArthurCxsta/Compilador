/* File generated by the BNF Converter (bnfc 2.9.5). */

#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.h"

/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2048
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

/* The following are simple heuristics for rendering terminals */
/* You may wish to change them */
void renderCC(Char c);
void renderCS(String s);
void indent(void);
void backup(void);
void onEmptyLine(void);
void removeTrailingSpaces(void);
void removeTrailingWhitespace(void);


char *printPrograms(Programs p);

void ppPrograms(Programs p, int i);
void ppDeclaracoes(Declaracoes p, int i);
void ppDeclaracao(Declaracao p, int i);
void ppStructDecl(StructDecl p, int i);
void ppFieldDecl(FieldDecl p, int i);
void ppPonteiraDecl(PonteiraDecl p, int i);
void ppVetorDecl(VetorDecl p, int i);
void ppInstrucoes(Instrucoes p, int i);
void ppInstrucao(Instrucao p, int i);
void ppAtribuicao(Atribuicao p, int i);
void ppComentario(Comentario p, int i);
void ppDeclaracaoSe(DeclaracaoSe p, int i);
void ppLoopPara(LoopPara p, int i);
void ppImprima(Imprima p, int i);
void ppEntrada(Entrada p, int i);
void ppModularizacao(Modularizacao p, int i);
void ppExpressao(Expressao p, int i);
void ppTermo(Termo p, int i);
void ppCondicao(Condicao p, int i);
void ppTipo(Tipo p, int i);
void ppIdentificador(Identificador p, int i);
void ppInteiro(Inteiro p, int i);
void ppReal(Real p, int i);
void ppChax(Chax p, int i);
void ppTexto(Texto p, int i);
void ppIdentifierLabel(IdentifierLabel p, int i);
void ppTypeType(TypeType p, int i);
void ppLetra(Letra p, int i);
void ppDigito(Digito p, int i);
void ppCaractere(Caractere p, int i);

char *showPrograms(Programs p);

void shPrograms(Programs p);
void shDeclaracoes(Declaracoes p);
void shDeclaracao(Declaracao p);
void shStructDecl(StructDecl p);
void shFieldDecl(FieldDecl p);
void shPonteiraDecl(PonteiraDecl p);
void shVetorDecl(VetorDecl p);
void shInstrucoes(Instrucoes p);
void shInstrucao(Instrucao p);
void shAtribuicao(Atribuicao p);
void shComentario(Comentario p);
void shDeclaracaoSe(DeclaracaoSe p);
void shLoopPara(LoopPara p);
void shImprima(Imprima p);
void shEntrada(Entrada p);
void shModularizacao(Modularizacao p);
void shExpressao(Expressao p);
void shTermo(Termo p);
void shCondicao(Condicao p);
void shTipo(Tipo p);
void shIdentificador(Identificador p);
void shInteiro(Inteiro p);
void shReal(Real p);
void shChax(Chax p);
void shTexto(Texto p);
void shIdentifierLabel(IdentifierLabel p);
void shTypeType(TypeType p);
void shLetra(Letra p);
void shDigito(Digito p);
void shCaractere(Caractere p);

void ppInteger(Integer n, int i);
void ppDouble(Double d, int i);
void ppChar(Char c, int i);
void ppString(String s, int i);
void ppIdent(String s, int i);
void shInteger(Integer n);
void shDouble(Double d);
void shChar(Char c);
void shString(String s);
void shIdent(String s);
void bufEscapeS(const char *s);
void bufEscapeC(const char c);
void bufAppendS(const char *s);
void bufAppendC(const char c);
void bufReset(void);
void resizeBuffer(void);

#endif

