/* File generated by the BNF Converter (bnfc 2.9.5). */

/* C Abstract Syntax Implementation. */

#include <stdio.h>
#include <stdlib.h>
#include "Absyn.h"

/********************   Label1    ********************/

Program make_Label1(Declaracoes p1, Instrucoes p2, Inteiro p3)
{
    Program tmp = (Program) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Label1!\n");
        exit(1);
    }
    tmp->kind = is_Label1;
    tmp->u.label1_.declaracoes_ = p1;
    tmp->u.label1_.instrucoes_ = p2;
    tmp->u.label1_.inteiro_ = p3;
    return tmp;
}

/********************   Declaracoes1    ********************/

Declaracoes make_Declaracoes1(Declaracao p1, Declaracoes p2)
{
    Declaracoes tmp = (Declaracoes) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracoes1!\n");
        exit(1);
    }
    tmp->kind = is_Declaracoes1;
    tmp->u.declaracoes1_.declaracao_ = p1;
    tmp->u.declaracoes1_.declaracoes_ = p2;
    return tmp;
}

/********************   Declaracao1    ********************/

Declaracao make_Declaracao1(Tipo p1, Identificador p2)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao1!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao1;
    tmp->u.declaracao1_.tipo_ = p1;
    tmp->u.declaracao1_.identificador_ = p2;
    return tmp;
}

/********************   Declaracao2    ********************/

Declaracao make_Declaracao2(StructDecl p1)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao2!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao2;
    tmp->u.declaracao2_.structdecl_ = p1;
    return tmp;
}

/********************   Declaracao3    ********************/

Declaracao make_Declaracao3(PonteiraDecl p1)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao3!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao3;
    tmp->u.declaracao3_.ponteiradecl_ = p1;
    return tmp;
}

/********************   Declaracao4    ********************/

Declaracao make_Declaracao4(VetorDecl p1)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao4!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao4;
    tmp->u.declaracao4_.vetordecl_ = p1;
    return tmp;
}

/********************   Declaracao5    ********************/

Declaracao make_Declaracao5(Tipo p1, Identificador p2, Inteiro p3)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao5!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao5;
    tmp->u.declaracao5_.tipo_ = p1;
    tmp->u.declaracao5_.identificador_ = p2;
    tmp->u.declaracao5_.inteiro_ = p3;
    return tmp;
}

/********************   Declaracao6    ********************/

Declaracao make_Declaracao6(Tipo p1, Identificador p2, Real p3)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao6!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao6;
    tmp->u.declaracao6_.tipo_ = p1;
    tmp->u.declaracao6_.identificador_ = p2;
    tmp->u.declaracao6_.real_ = p3;
    return tmp;
}

/********************   Declaracao7    ********************/

Declaracao make_Declaracao7(Tipo p1, Identificador p2, Char p3)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao7!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao7;
    tmp->u.declaracao7_.tipo_ = p1;
    tmp->u.declaracao7_.identificador_ = p2;
    tmp->u.declaracao7_.char_ = p3;
    return tmp;
}

/********************   Declaracao8    ********************/

Declaracao make_Declaracao8(Tipo p1, Identificador p2, String p3)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao8!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao8;
    tmp->u.declaracao8_.tipo_ = p1;
    tmp->u.declaracao8_.identificador_ = p2;
    tmp->u.declaracao8_.string_ = p3;
    return tmp;
}

/********************   Declaracao9    ********************/

Declaracao make_Declaracao9(StructDecl p1)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao9!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao9;
    tmp->u.declaracao9_.structdecl_ = p1;
    return tmp;
}

/********************   Declaracao10    ********************/

Declaracao make_Declaracao10(PonteiraDecl p1)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao10!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao10;
    tmp->u.declaracao10_.ponteiradecl_ = p1;
    return tmp;
}

/********************   Declaracao11    ********************/

Declaracao make_Declaracao11(VetorDecl p1)
{
    Declaracao tmp = (Declaracao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Declaracao11!\n");
        exit(1);
    }
    tmp->kind = is_Declaracao11;
    tmp->u.declaracao11_.vetordecl_ = p1;
    return tmp;
}

/********************   E    ********************/

StructDecl make_E(IdentifierLabel p1, FieldDecl p2)
{
    StructDecl tmp = (StructDecl) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating E!\n");
        exit(1);
    }
    tmp->kind = is_E;
    tmp->u.e_.identifierlabel_ = p1;
    tmp->u.e_.fielddecl_ = p2;
    return tmp;
}

/********************   F    ********************/

FieldDecl make_F(TypeType p1, IdentifierLabel p2)
{
    FieldDecl tmp = (FieldDecl) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating F!\n");
        exit(1);
    }
    tmp->kind = is_F;
    tmp->u.f_.typetype_ = p1;
    tmp->u.f_.identifierlabel_ = p2;
    return tmp;
}

/********************   P    ********************/

PonteiraDecl make_P(TypeType p1, IdentifierLabel p2)
{
    PonteiraDecl tmp = (PonteiraDecl) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating P!\n");
        exit(1);
    }
    tmp->kind = is_P;
    tmp->u.p_.typetype_ = p1;
    tmp->u.p_.identifierlabel_ = p2;
    return tmp;
}

/********************   V    ********************/

VetorDecl make_V(TypeType p1, IdentifierLabel p2, Inteiro p3)
{
    VetorDecl tmp = (VetorDecl) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating V!\n");
        exit(1);
    }
    tmp->kind = is_V;
    tmp->u.v_.typetype_ = p1;
    tmp->u.v_.identifierlabel_ = p2;
    tmp->u.v_.inteiro_ = p3;
    return tmp;
}

/********************   Instrucoes1    ********************/

Instrucoes make_Instrucoes1(Instrucao p1, Instrucoes p2)
{
    Instrucoes tmp = (Instrucoes) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Instrucoes1!\n");
        exit(1);
    }
    tmp->kind = is_Instrucoes1;
    tmp->u.instrucoes1_.instrucao_ = p1;
    tmp->u.instrucoes1_.instrucoes_ = p2;
    return tmp;
}

/********************   Instrucao1    ********************/

Instrucao make_Instrucao1(Atribuicao p1)
{
    Instrucao tmp = (Instrucao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Instrucao1!\n");
        exit(1);
    }
    tmp->kind = is_Instrucao1;
    tmp->u.instrucao1_.atribuicao_ = p1;
    return tmp;
}

/********************   Instrucao2    ********************/

Instrucao make_Instrucao2(Modularizacao p1)
{
    Instrucao tmp = (Instrucao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Instrucao2!\n");
        exit(1);
    }
    tmp->kind = is_Instrucao2;
    tmp->u.instrucao2_.modularizacao_ = p1;
    return tmp;
}

/********************   A    ********************/

Atribuicao make_A(Identificador p1, Expressao p2)
{
    Atribuicao tmp = (Atribuicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating A!\n");
        exit(1);
    }
    tmp->kind = is_A;
    tmp->u.a_.identificador_ = p1;
    tmp->u.a_.expressao_ = p2;
    return tmp;
}

/********************   Co    ********************/

Comentario make_Co(String p1)
{
    Comentario tmp = (Comentario) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Co!\n");
        exit(1);
    }
    tmp->kind = is_Co;
    tmp->u.co_.string_ = p1;
    return tmp;
}

/********************   Label2    ********************/

DeclaracaoSe make_Label2(Expressao p1, Instrucoes p2, Instrucoes p3)
{
    DeclaracaoSe tmp = (DeclaracaoSe) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Label2!\n");
        exit(1);
    }
    tmp->kind = is_Label2;
    tmp->u.label2_.expressao_ = p1;
    tmp->u.label2_.instrucoes_1 = p2;
    tmp->u.label2_.instrucoes_2 = p3;
    return tmp;
}

/********************   Label3    ********************/

LoopPara make_Label3(Atribuicao p1, Condicao p2, Atribuicao p3, Instrucoes p4)
{
    LoopPara tmp = (LoopPara) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Label3!\n");
        exit(1);
    }
    tmp->kind = is_Label3;
    tmp->u.label3_.atribuicao_1 = p1;
    tmp->u.label3_.condicao_ = p2;
    tmp->u.label3_.atribuicao_2 = p3;
    tmp->u.label3_.instrucoes_ = p4;
    return tmp;
}

/********************   Label4    ********************/

Imprima make_Label4(Expressao p1)
{
    Imprima tmp = (Imprima) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Label4!\n");
        exit(1);
    }
    tmp->kind = is_Label4;
    tmp->u.label4_.expressao_ = p1;
    return tmp;
}

/********************   Label5    ********************/

Entrada make_Label5(Identificador p1)
{
    Entrada tmp = (Entrada) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Label5!\n");
        exit(1);
    }
    tmp->kind = is_Label5;
    tmp->u.label5_.identificador_ = p1;
    return tmp;
}

/********************   Label6    ********************/

Modularizacao make_Label6(IdentifierLabel p1, Instrucoes p2)
{
    Modularizacao tmp = (Modularizacao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Label6!\n");
        exit(1);
    }
    tmp->kind = is_Label6;
    tmp->u.label6_.identifierlabel_ = p1;
    tmp->u.label6_.instrucoes_ = p2;
    return tmp;
}

/********************   Expressao1    ********************/

Expressao make_Expressao1(Termo p1)
{
    Expressao tmp = (Expressao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Expressao1!\n");
        exit(1);
    }
    tmp->kind = is_Expressao1;
    tmp->u.expressao1_.termo_ = p1;
    return tmp;
}

/********************   Expressao2    ********************/

Expressao make_Expressao2(Expressao p1, Termo p2)
{
    Expressao tmp = (Expressao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Expressao2!\n");
        exit(1);
    }
    tmp->kind = is_Expressao2;
    tmp->u.expressao2_.expressao_ = p1;
    tmp->u.expressao2_.termo_ = p2;
    return tmp;
}

/********************   Expressao3    ********************/

Expressao make_Expressao3(Expressao p1, Termo p2)
{
    Expressao tmp = (Expressao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Expressao3!\n");
        exit(1);
    }
    tmp->kind = is_Expressao3;
    tmp->u.expressao3_.expressao_ = p1;
    tmp->u.expressao3_.termo_ = p2;
    return tmp;
}

/********************   Expressao4    ********************/

Expressao make_Expressao4(Expressao p1, Termo p2)
{
    Expressao tmp = (Expressao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Expressao4!\n");
        exit(1);
    }
    tmp->kind = is_Expressao4;
    tmp->u.expressao4_.expressao_ = p1;
    tmp->u.expressao4_.termo_ = p2;
    return tmp;
}

/********************   Expressao5    ********************/

Expressao make_Expressao5(Expressao p1, Termo p2)
{
    Expressao tmp = (Expressao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Expressao5!\n");
        exit(1);
    }
    tmp->kind = is_Expressao5;
    tmp->u.expressao5_.expressao_ = p1;
    tmp->u.expressao5_.termo_ = p2;
    return tmp;
}

/********************   Termo1    ********************/

Termo make_Termo1(Identificador p1)
{
    Termo tmp = (Termo) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Termo1!\n");
        exit(1);
    }
    tmp->kind = is_Termo1;
    tmp->u.termo1_.identificador_ = p1;
    return tmp;
}

/********************   Termo2    ********************/

Termo make_Termo2(Identificador p1, Inteiro p2)
{
    Termo tmp = (Termo) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Termo2!\n");
        exit(1);
    }
    tmp->kind = is_Termo2;
    tmp->u.termo2_.identificador_ = p1;
    tmp->u.termo2_.inteiro_ = p2;
    return tmp;
}

/********************   TermoInteiro    ********************/

Termo make_TermoInteiro(Inteiro p1)
{
    Termo tmp = (Termo) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TermoInteiro!\n");
        exit(1);
    }
    tmp->kind = is_TermoInteiro;
    tmp->u.termointeiro_.inteiro_ = p1;
    return tmp;
}

/********************   TermoTexto    ********************/

Termo make_TermoTexto(Texto p1)
{
    Termo tmp = (Termo) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TermoTexto!\n");
        exit(1);
    }
    tmp->kind = is_TermoTexto;
    tmp->u.termotexto_.texto_ = p1;
    return tmp;
}

/********************   Termo3    ********************/

Termo make_Termo3(Identificador p1, Inteiro p2)
{
    Termo tmp = (Termo) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Termo3!\n");
        exit(1);
    }
    tmp->kind = is_Termo3;
    tmp->u.termo3_.identificador_ = p1;
    tmp->u.termo3_.inteiro_ = p2;
    return tmp;
}

/********************   Condicao1    ********************/

Condicao make_Condicao1(Expressao p1, Expressao p2)
{
    Condicao tmp = (Condicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Condicao1!\n");
        exit(1);
    }
    tmp->kind = is_Condicao1;
    tmp->u.condicao1_.expressao_1 = p1;
    tmp->u.condicao1_.expressao_2 = p2;
    return tmp;
}

/********************   Condicao2    ********************/

Condicao make_Condicao2(Expressao p1, Expressao p2)
{
    Condicao tmp = (Condicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Condicao2!\n");
        exit(1);
    }
    tmp->kind = is_Condicao2;
    tmp->u.condicao2_.expressao_1 = p1;
    tmp->u.condicao2_.expressao_2 = p2;
    return tmp;
}

/********************   Condicao3    ********************/

Condicao make_Condicao3(Expressao p1, Expressao p2)
{
    Condicao tmp = (Condicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Condicao3!\n");
        exit(1);
    }
    tmp->kind = is_Condicao3;
    tmp->u.condicao3_.expressao_1 = p1;
    tmp->u.condicao3_.expressao_2 = p2;
    return tmp;
}

/********************   Condicao4    ********************/

Condicao make_Condicao4(Expressao p1, Expressao p2)
{
    Condicao tmp = (Condicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Condicao4!\n");
        exit(1);
    }
    tmp->kind = is_Condicao4;
    tmp->u.condicao4_.expressao_1 = p1;
    tmp->u.condicao4_.expressao_2 = p2;
    return tmp;
}

/********************   Condicao5    ********************/

Condicao make_Condicao5(Expressao p1, Expressao p2)
{
    Condicao tmp = (Condicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Condicao5!\n");
        exit(1);
    }
    tmp->kind = is_Condicao5;
    tmp->u.condicao5_.expressao_1 = p1;
    tmp->u.condicao5_.expressao_2 = p2;
    return tmp;
}

/********************   Condicao6    ********************/

Condicao make_Condicao6(Condicao p1)
{
    Condicao tmp = (Condicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Condicao6!\n");
        exit(1);
    }
    tmp->kind = is_Condicao6;
    tmp->u.condicao6_.condicao_ = p1;
    return tmp;
}

/********************   Condicao7    ********************/

Condicao make_Condicao7(Condicao p1)
{
    Condicao tmp = (Condicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Condicao7!\n");
        exit(1);
    }
    tmp->kind = is_Condicao7;
    tmp->u.condicao7_.condicao_ = p1;
    return tmp;
}

/********************   Condicao8    ********************/

Condicao make_Condicao8(Condicao p1, Condicao p2)
{
    Condicao tmp = (Condicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Condicao8!\n");
        exit(1);
    }
    tmp->kind = is_Condicao8;
    tmp->u.condicao8_.condicao_1 = p1;
    tmp->u.condicao8_.condicao_2 = p2;
    return tmp;
}

/********************   Condicao9    ********************/

Condicao make_Condicao9(Condicao p1, Condicao p2)
{
    Condicao tmp = (Condicao) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Condicao9!\n");
        exit(1);
    }
    tmp->kind = is_Condicao9;
    tmp->u.condicao9_.condicao_1 = p1;
    tmp->u.condicao9_.condicao_2 = p2;
    return tmp;
}

/********************   Tipo_int    ********************/

Tipo make_Tipo_int()
{
    Tipo tmp = (Tipo) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Tipo_int!\n");
        exit(1);
    }
    tmp->kind = is_Tipo_int;
    return tmp;
}

/********************   Tipo_texto    ********************/

Tipo make_Tipo_texto()
{
    Tipo tmp = (Tipo) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Tipo_texto!\n");
        exit(1);
    }
    tmp->kind = is_Tipo_texto;
    return tmp;
}

/********************   Tipo1    ********************/

Tipo make_Tipo1(IdentifierLabel p1)
{
    Tipo tmp = (Tipo) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Tipo1!\n");
        exit(1);
    }
    tmp->kind = is_Tipo1;
    tmp->u.tipo1_.identifierlabel_ = p1;
    return tmp;
}

/********************   Id    ********************/

Identificador make_Id(Letra p1)
{
    Identificador tmp = (Identificador) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Id!\n");
        exit(1);
    }
    tmp->kind = is_Id;
    tmp->u.id_.letra_ = p1;
    return tmp;
}

/********************   In    ********************/

Inteiro make_In(Digito p1)
{
    Inteiro tmp = (Inteiro) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating In!\n");
        exit(1);
    }
    tmp->kind = is_In;
    tmp->u.in_.digito_ = p1;
    return tmp;
}

/********************   Ir    ********************/

Real make_Ir(Digito p1, Digito p2)
{
    Real tmp = (Real) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Ir!\n");
        exit(1);
    }
    tmp->kind = is_Ir;
    tmp->u.ir_.digito_1 = p1;
    tmp->u.ir_.digito_2 = p2;
    return tmp;
}

/********************   Ch    ********************/

Chax make_Ch(Letra p1)
{
    Chax tmp = (Chax) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Ch!\n");
        exit(1);
    }
    tmp->kind = is_Ch;
    tmp->u.ch_.letra_ = p1;
    return tmp;
}

/********************   It    ********************/

Texto make_It()
{
    Texto tmp = (Texto) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating It!\n");
        exit(1);
    }
    tmp->kind = is_It;
    return tmp;
}

/********************   Ie    ********************/

IdentifierLabel make_Ie(Identificador p1)
{
    IdentifierLabel tmp = (IdentifierLabel) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Ie!\n");
        exit(1);
    }
    tmp->kind = is_Ie;
    tmp->u.ie_.identificador_ = p1;
    return tmp;
}

/********************   TypeType11    ********************/

TypeType make_TypeType11()
{
    TypeType tmp = (TypeType) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TypeType11!\n");
        exit(1);
    }
    tmp->kind = is_TypeType11;
    return tmp;
}

/********************   TypeType12    ********************/

TypeType make_TypeType12()
{
    TypeType tmp = (TypeType) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TypeType12!\n");
        exit(1);
    }
    tmp->kind = is_TypeType12;
    return tmp;
}

/********************   TypeType13    ********************/

TypeType make_TypeType13(IdentifierLabel p1)
{
    TypeType tmp = (TypeType) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TypeType13!\n");
        exit(1);
    }
    tmp->kind = is_TypeType13;
    tmp->u.typetype13_.identifierlabel_ = p1;
    return tmp;
}

/********************   TypeType21    ********************/

TypeType make_TypeType21()
{
    TypeType tmp = (TypeType) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TypeType21!\n");
        exit(1);
    }
    tmp->kind = is_TypeType21;
    return tmp;
}

/********************   TypeType22    ********************/

TypeType make_TypeType22()
{
    TypeType tmp = (TypeType) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TypeType22!\n");
        exit(1);
    }
    tmp->kind = is_TypeType22;
    return tmp;
}

/********************   TypeType23    ********************/

TypeType make_TypeType23(IdentifierLabel p1)
{
    TypeType tmp = (TypeType) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TypeType23!\n");
        exit(1);
    }
    tmp->kind = is_TypeType23;
    tmp->u.typetype23_.identifierlabel_ = p1;
    return tmp;
}

/********************   TypeType31    ********************/

TypeType make_TypeType31()
{
    TypeType tmp = (TypeType) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TypeType31!\n");
        exit(1);
    }
    tmp->kind = is_TypeType31;
    return tmp;
}

/********************   TypeType32    ********************/

TypeType make_TypeType32()
{
    TypeType tmp = (TypeType) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TypeType32!\n");
        exit(1);
    }
    tmp->kind = is_TypeType32;
    return tmp;
}

/********************   TypeType33    ********************/

TypeType make_TypeType33(IdentifierLabel p1)
{
    TypeType tmp = (TypeType) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating TypeType33!\n");
        exit(1);
    }
    tmp->kind = is_TypeType33;
    tmp->u.typetype33_.identifierlabel_ = p1;
    return tmp;
}

/********************   L    ********************/

Letra make_L()
{
    Letra tmp = (Letra) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating L!\n");
        exit(1);
    }
    tmp->kind = is_L;
    return tmp;
}

/********************   D    ********************/

Digito make_D()
{
    Digito tmp = (Digito) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating D!\n");
        exit(1);
    }
    tmp->kind = is_D;
    return tmp;
}

/********************   Ca    ********************/

Caractere make_Ca()
{
    Caractere tmp = (Caractere) malloc(sizeof(*tmp));
    if (!tmp)
    {
        fprintf(stderr, "Error: out of memory when allocating Ca!\n");
        exit(1);
    }
    tmp->kind = is_Ca;
    return tmp;
}

/***************************   Cloning   ******************************/

Program clone_Program(Program p)
{
  switch(p->kind)
  {
  case is_Label1:
    return make_Label1
      ( clone_Declaracoes(p->u.label1_.declaracoes_)
      , clone_Instrucoes(p->u.label1_.instrucoes_)
      , clone_Inteiro(p->u.label1_.inteiro_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning Program!\n");
    exit(1);
  }
}

Declaracoes clone_Declaracoes(Declaracoes p)
{
  switch(p->kind)
  {
  case is_Declaracoes1:
    return make_Declaracoes1
      ( clone_Declaracao(p->u.declaracoes1_.declaracao_)
      , clone_Declaracoes(p->u.declaracoes1_.declaracoes_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning Declaracoes!\n");
    exit(1);
  }
}

Declaracao clone_Declaracao(Declaracao p)
{
  switch(p->kind)
  {
  case is_Declaracao1:
    return make_Declaracao1
      ( clone_Tipo(p->u.declaracao1_.tipo_)
      , clone_Identificador(p->u.declaracao1_.identificador_)
      );

  case is_Declaracao2:
    return make_Declaracao2 (clone_StructDecl(p->u.declaracao2_.structdecl_));

  case is_Declaracao3:
    return make_Declaracao3 (clone_PonteiraDecl(p->u.declaracao3_.ponteiradecl_));

  case is_Declaracao4:
    return make_Declaracao4 (clone_VetorDecl(p->u.declaracao4_.vetordecl_));

  case is_Declaracao5:
    return make_Declaracao5
      ( clone_Tipo(p->u.declaracao5_.tipo_)
      , clone_Identificador(p->u.declaracao5_.identificador_)
      , clone_Inteiro(p->u.declaracao5_.inteiro_)
      );

  case is_Declaracao6:
    return make_Declaracao6
      ( clone_Tipo(p->u.declaracao6_.tipo_)
      , clone_Identificador(p->u.declaracao6_.identificador_)
      , clone_Real(p->u.declaracao6_.real_)
      );

  case is_Declaracao7:
    return make_Declaracao7
      ( clone_Tipo(p->u.declaracao7_.tipo_)
      , clone_Identificador(p->u.declaracao7_.identificador_)
      , p->u.declaracao7_.char_
      );

  case is_Declaracao8:
    return make_Declaracao8
      ( clone_Tipo(p->u.declaracao8_.tipo_)
      , clone_Identificador(p->u.declaracao8_.identificador_)
      , strdup(p->u.declaracao8_.string_)
      );

  case is_Declaracao9:
    return make_Declaracao9 (clone_StructDecl(p->u.declaracao9_.structdecl_));

  case is_Declaracao10:
    return make_Declaracao10 (clone_PonteiraDecl(p->u.declaracao10_.ponteiradecl_));

  case is_Declaracao11:
    return make_Declaracao11 (clone_VetorDecl(p->u.declaracao11_.vetordecl_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning Declaracao!\n");
    exit(1);
  }
}

StructDecl clone_StructDecl(StructDecl p)
{
  switch(p->kind)
  {
  case is_E:
    return make_E
      ( clone_IdentifierLabel(p->u.e_.identifierlabel_)
      , clone_FieldDecl(p->u.e_.fielddecl_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning StructDecl!\n");
    exit(1);
  }
}

FieldDecl clone_FieldDecl(FieldDecl p)
{
  switch(p->kind)
  {
  case is_F:
    return make_F
      ( clone_TypeType(p->u.f_.typetype_)
      , clone_IdentifierLabel(p->u.f_.identifierlabel_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning FieldDecl!\n");
    exit(1);
  }
}

PonteiraDecl clone_PonteiraDecl(PonteiraDecl p)
{
  switch(p->kind)
  {
  case is_P:
    return make_P
      ( clone_TypeType(p->u.p_.typetype_)
      , clone_IdentifierLabel(p->u.p_.identifierlabel_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning PonteiraDecl!\n");
    exit(1);
  }
}

VetorDecl clone_VetorDecl(VetorDecl p)
{
  switch(p->kind)
  {
  case is_V:
    return make_V
      ( clone_TypeType(p->u.v_.typetype_)
      , clone_IdentifierLabel(p->u.v_.identifierlabel_)
      , clone_Inteiro(p->u.v_.inteiro_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning VetorDecl!\n");
    exit(1);
  }
}

Instrucoes clone_Instrucoes(Instrucoes p)
{
  switch(p->kind)
  {
  case is_Instrucoes1:
    return make_Instrucoes1
      ( clone_Instrucao(p->u.instrucoes1_.instrucao_)
      , clone_Instrucoes(p->u.instrucoes1_.instrucoes_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning Instrucoes!\n");
    exit(1);
  }
}

Instrucao clone_Instrucao(Instrucao p)
{
  switch(p->kind)
  {
  case is_Instrucao1:
    return make_Instrucao1 (clone_Atribuicao(p->u.instrucao1_.atribuicao_));

  case is_Instrucao2:
    return make_Instrucao2 (clone_Modularizacao(p->u.instrucao2_.modularizacao_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning Instrucao!\n");
    exit(1);
  }
}

Atribuicao clone_Atribuicao(Atribuicao p)
{
  switch(p->kind)
  {
  case is_A:
    return make_A
      ( clone_Identificador(p->u.a_.identificador_)
      , clone_Expressao(p->u.a_.expressao_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning Atribuicao!\n");
    exit(1);
  }
}

Comentario clone_Comentario(Comentario p)
{
  switch(p->kind)
  {
  case is_Co:
    return make_Co (strdup(p->u.co_.string_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning Comentario!\n");
    exit(1);
  }
}

DeclaracaoSe clone_DeclaracaoSe(DeclaracaoSe p)
{
  switch(p->kind)
  {
  case is_Label2:
    return make_Label2
      ( clone_Expressao(p->u.label2_.expressao_)
      , clone_Instrucoes(p->u.label2_.instrucoes_1)
      , clone_Instrucoes(p->u.label2_.instrucoes_2)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning DeclaracaoSe!\n");
    exit(1);
  }
}

LoopPara clone_LoopPara(LoopPara p)
{
  switch(p->kind)
  {
  case is_Label3:
    return make_Label3
      ( clone_Atribuicao(p->u.label3_.atribuicao_1)
      , clone_Condicao(p->u.label3_.condicao_)
      , clone_Atribuicao(p->u.label3_.atribuicao_2)
      , clone_Instrucoes(p->u.label3_.instrucoes_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning LoopPara!\n");
    exit(1);
  }
}

Imprima clone_Imprima(Imprima p)
{
  switch(p->kind)
  {
  case is_Label4:
    return make_Label4 (clone_Expressao(p->u.label4_.expressao_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning Imprima!\n");
    exit(1);
  }
}

Entrada clone_Entrada(Entrada p)
{
  switch(p->kind)
  {
  case is_Label5:
    return make_Label5 (clone_Identificador(p->u.label5_.identificador_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning Entrada!\n");
    exit(1);
  }
}

Modularizacao clone_Modularizacao(Modularizacao p)
{
  switch(p->kind)
  {
  case is_Label6:
    return make_Label6
      ( clone_IdentifierLabel(p->u.label6_.identifierlabel_)
      , clone_Instrucoes(p->u.label6_.instrucoes_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning Modularizacao!\n");
    exit(1);
  }
}

Expressao clone_Expressao(Expressao p)
{
  switch(p->kind)
  {
  case is_Expressao1:
    return make_Expressao1 (clone_Termo(p->u.expressao1_.termo_));

  case is_Expressao2:
    return make_Expressao2
      ( clone_Expressao(p->u.expressao2_.expressao_)
      , clone_Termo(p->u.expressao2_.termo_)
      );

  case is_Expressao3:
    return make_Expressao3
      ( clone_Expressao(p->u.expressao3_.expressao_)
      , clone_Termo(p->u.expressao3_.termo_)
      );

  case is_Expressao4:
    return make_Expressao4
      ( clone_Expressao(p->u.expressao4_.expressao_)
      , clone_Termo(p->u.expressao4_.termo_)
      );

  case is_Expressao5:
    return make_Expressao5
      ( clone_Expressao(p->u.expressao5_.expressao_)
      , clone_Termo(p->u.expressao5_.termo_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning Expressao!\n");
    exit(1);
  }
}

Termo clone_Termo(Termo p)
{
  switch(p->kind)
  {
  case is_Termo1:
    return make_Termo1 (clone_Identificador(p->u.termo1_.identificador_));

  case is_Termo2:
    return make_Termo2
      ( clone_Identificador(p->u.termo2_.identificador_)
      , clone_Inteiro(p->u.termo2_.inteiro_)
      );

  case is_TermoInteiro:
    return make_TermoInteiro (clone_Inteiro(p->u.termointeiro_.inteiro_));

  case is_TermoTexto:
    return make_TermoTexto (clone_Texto(p->u.termotexto_.texto_));

  case is_Termo3:
    return make_Termo3
      ( clone_Identificador(p->u.termo3_.identificador_)
      , clone_Inteiro(p->u.termo3_.inteiro_)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning Termo!\n");
    exit(1);
  }
}

Condicao clone_Condicao(Condicao p)
{
  switch(p->kind)
  {
  case is_Condicao1:
    return make_Condicao1
      ( clone_Expressao(p->u.condicao1_.expressao_1)
      , clone_Expressao(p->u.condicao1_.expressao_2)
      );

  case is_Condicao2:
    return make_Condicao2
      ( clone_Expressao(p->u.condicao2_.expressao_1)
      , clone_Expressao(p->u.condicao2_.expressao_2)
      );

  case is_Condicao3:
    return make_Condicao3
      ( clone_Expressao(p->u.condicao3_.expressao_1)
      , clone_Expressao(p->u.condicao3_.expressao_2)
      );

  case is_Condicao4:
    return make_Condicao4
      ( clone_Expressao(p->u.condicao4_.expressao_1)
      , clone_Expressao(p->u.condicao4_.expressao_2)
      );

  case is_Condicao5:
    return make_Condicao5
      ( clone_Expressao(p->u.condicao5_.expressao_1)
      , clone_Expressao(p->u.condicao5_.expressao_2)
      );

  case is_Condicao6:
    return make_Condicao6 (clone_Condicao(p->u.condicao6_.condicao_));

  case is_Condicao7:
    return make_Condicao7 (clone_Condicao(p->u.condicao7_.condicao_));

  case is_Condicao8:
    return make_Condicao8
      ( clone_Condicao(p->u.condicao8_.condicao_1)
      , clone_Condicao(p->u.condicao8_.condicao_2)
      );

  case is_Condicao9:
    return make_Condicao9
      ( clone_Condicao(p->u.condicao9_.condicao_1)
      , clone_Condicao(p->u.condicao9_.condicao_2)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning Condicao!\n");
    exit(1);
  }
}

Tipo clone_Tipo(Tipo p)
{
  switch(p->kind)
  {
  case is_Tipo_int:
    return make_Tipo_int ();

  case is_Tipo_texto:
    return make_Tipo_texto ();

  case is_Tipo1:
    return make_Tipo1 (clone_IdentifierLabel(p->u.tipo1_.identifierlabel_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning Tipo!\n");
    exit(1);
  }
}

Identificador clone_Identificador(Identificador p)
{
  switch(p->kind)
  {
  case is_Id:
    return make_Id (clone_Letra(p->u.id_.letra_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning Identificador!\n");
    exit(1);
  }
}

Inteiro clone_Inteiro(Inteiro p)
{
  switch(p->kind)
  {
  case is_In:
    return make_In (clone_Digito(p->u.in_.digito_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning Inteiro!\n");
    exit(1);
  }
}

Real clone_Real(Real p)
{
  switch(p->kind)
  {
  case is_Ir:
    return make_Ir
      ( clone_Digito(p->u.ir_.digito_1)
      , clone_Digito(p->u.ir_.digito_2)
      );

  default:
    fprintf(stderr, "Error: bad kind field when cloning Real!\n");
    exit(1);
  }
}

Chax clone_Chax(Chax p)
{
  switch(p->kind)
  {
  case is_Ch:
    return make_Ch (clone_Letra(p->u.ch_.letra_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning Chax!\n");
    exit(1);
  }
}

Texto clone_Texto(Texto p)
{
  switch(p->kind)
  {
  case is_It:
    return make_It ();

  default:
    fprintf(stderr, "Error: bad kind field when cloning Texto!\n");
    exit(1);
  }
}

IdentifierLabel clone_IdentifierLabel(IdentifierLabel p)
{
  switch(p->kind)
  {
  case is_Ie:
    return make_Ie (clone_Identificador(p->u.ie_.identificador_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning IdentifierLabel!\n");
    exit(1);
  }
}

TypeType clone_TypeType(TypeType p)
{
  switch(p->kind)
  {
  case is_TypeType11:
    return make_TypeType11 ();

  case is_TypeType12:
    return make_TypeType12 ();

  case is_TypeType13:
    return make_TypeType13 (clone_IdentifierLabel(p->u.typetype13_.identifierlabel_));

  case is_TypeType21:
    return make_TypeType21 ();

  case is_TypeType22:
    return make_TypeType22 ();

  case is_TypeType23:
    return make_TypeType23 (clone_IdentifierLabel(p->u.typetype23_.identifierlabel_));

  case is_TypeType31:
    return make_TypeType31 ();

  case is_TypeType32:
    return make_TypeType32 ();

  case is_TypeType33:
    return make_TypeType33 (clone_IdentifierLabel(p->u.typetype33_.identifierlabel_));

  default:
    fprintf(stderr, "Error: bad kind field when cloning TypeType!\n");
    exit(1);
  }
}

Letra clone_Letra(Letra p)
{
  switch(p->kind)
  {
  case is_L:
    return make_L ();

  default:
    fprintf(stderr, "Error: bad kind field when cloning Letra!\n");
    exit(1);
  }
}

Digito clone_Digito(Digito p)
{
  switch(p->kind)
  {
  case is_D:
    return make_D ();

  default:
    fprintf(stderr, "Error: bad kind field when cloning Digito!\n");
    exit(1);
  }
}

Caractere clone_Caractere(Caractere p)
{
  switch(p->kind)
  {
  case is_Ca:
    return make_Ca ();

  default:
    fprintf(stderr, "Error: bad kind field when cloning Caractere!\n");
    exit(1);
  }
}

/********************   Recursive Destructors    **********************/

/* These free an entire abstract syntax tree
 * including all subtrees and strings.
 *
 * Will not work properly if there is sharing in the tree,
 * i.e., when some pointers are aliased.  In this case
 * it will attempt to free the same memory twice.
 */

void free_Program(Program p)
{
  switch(p->kind)
  {
  case is_Label1:
    free_Declaracoes(p->u.label1_.declaracoes_);
    free_Instrucoes(p->u.label1_.instrucoes_);
    free_Inteiro(p->u.label1_.inteiro_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Program!\n");
    exit(1);
  }
  free(p);
}

void free_Declaracoes(Declaracoes p)
{
  switch(p->kind)
  {
  case is_Declaracoes1:
    free_Declaracao(p->u.declaracoes1_.declaracao_);
    free_Declaracoes(p->u.declaracoes1_.declaracoes_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Declaracoes!\n");
    exit(1);
  }
  free(p);
}

void free_Declaracao(Declaracao p)
{
  switch(p->kind)
  {
  case is_Declaracao1:
    free_Tipo(p->u.declaracao1_.tipo_);
    free_Identificador(p->u.declaracao1_.identificador_);
    break;

  case is_Declaracao2:
    free_StructDecl(p->u.declaracao2_.structdecl_);
    break;

  case is_Declaracao3:
    free_PonteiraDecl(p->u.declaracao3_.ponteiradecl_);
    break;

  case is_Declaracao4:
    free_VetorDecl(p->u.declaracao4_.vetordecl_);
    break;

  case is_Declaracao5:
    free_Tipo(p->u.declaracao5_.tipo_);
    free_Identificador(p->u.declaracao5_.identificador_);
    free_Inteiro(p->u.declaracao5_.inteiro_);
    break;

  case is_Declaracao6:
    free_Tipo(p->u.declaracao6_.tipo_);
    free_Identificador(p->u.declaracao6_.identificador_);
    free_Real(p->u.declaracao6_.real_);
    break;

  case is_Declaracao7:
    free_Tipo(p->u.declaracao7_.tipo_);
    free_Identificador(p->u.declaracao7_.identificador_);
    break;

  case is_Declaracao8:
    free_Tipo(p->u.declaracao8_.tipo_);
    free_Identificador(p->u.declaracao8_.identificador_);
    free(p->u.declaracao8_.string_);
    break;

  case is_Declaracao9:
    free_StructDecl(p->u.declaracao9_.structdecl_);
    break;

  case is_Declaracao10:
    free_PonteiraDecl(p->u.declaracao10_.ponteiradecl_);
    break;

  case is_Declaracao11:
    free_VetorDecl(p->u.declaracao11_.vetordecl_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Declaracao!\n");
    exit(1);
  }
  free(p);
}

void free_StructDecl(StructDecl p)
{
  switch(p->kind)
  {
  case is_E:
    free_IdentifierLabel(p->u.e_.identifierlabel_);
    free_FieldDecl(p->u.e_.fielddecl_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing StructDecl!\n");
    exit(1);
  }
  free(p);
}

void free_FieldDecl(FieldDecl p)
{
  switch(p->kind)
  {
  case is_F:
    free_TypeType(p->u.f_.typetype_);
    free_IdentifierLabel(p->u.f_.identifierlabel_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing FieldDecl!\n");
    exit(1);
  }
  free(p);
}

void free_PonteiraDecl(PonteiraDecl p)
{
  switch(p->kind)
  {
  case is_P:
    free_TypeType(p->u.p_.typetype_);
    free_IdentifierLabel(p->u.p_.identifierlabel_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing PonteiraDecl!\n");
    exit(1);
  }
  free(p);
}

void free_VetorDecl(VetorDecl p)
{
  switch(p->kind)
  {
  case is_V:
    free_TypeType(p->u.v_.typetype_);
    free_IdentifierLabel(p->u.v_.identifierlabel_);
    free_Inteiro(p->u.v_.inteiro_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing VetorDecl!\n");
    exit(1);
  }
  free(p);
}

void free_Instrucoes(Instrucoes p)
{
  switch(p->kind)
  {
  case is_Instrucoes1:
    free_Instrucao(p->u.instrucoes1_.instrucao_);
    free_Instrucoes(p->u.instrucoes1_.instrucoes_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Instrucoes!\n");
    exit(1);
  }
  free(p);
}

void free_Instrucao(Instrucao p)
{
  switch(p->kind)
  {
  case is_Instrucao1:
    free_Atribuicao(p->u.instrucao1_.atribuicao_);
    break;

  case is_Instrucao2:
    free_Modularizacao(p->u.instrucao2_.modularizacao_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Instrucao!\n");
    exit(1);
  }
  free(p);
}

void free_Atribuicao(Atribuicao p)
{
  switch(p->kind)
  {
  case is_A:
    free_Identificador(p->u.a_.identificador_);
    free_Expressao(p->u.a_.expressao_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Atribuicao!\n");
    exit(1);
  }
  free(p);
}

void free_Comentario(Comentario p)
{
  switch(p->kind)
  {
  case is_Co:
    free(p->u.co_.string_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Comentario!\n");
    exit(1);
  }
  free(p);
}

void free_DeclaracaoSe(DeclaracaoSe p)
{
  switch(p->kind)
  {
  case is_Label2:
    free_Expressao(p->u.label2_.expressao_);
    free_Instrucoes(p->u.label2_.instrucoes_1);
    free_Instrucoes(p->u.label2_.instrucoes_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing DeclaracaoSe!\n");
    exit(1);
  }
  free(p);
}

void free_LoopPara(LoopPara p)
{
  switch(p->kind)
  {
  case is_Label3:
    free_Atribuicao(p->u.label3_.atribuicao_1);
    free_Condicao(p->u.label3_.condicao_);
    free_Atribuicao(p->u.label3_.atribuicao_2);
    free_Instrucoes(p->u.label3_.instrucoes_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing LoopPara!\n");
    exit(1);
  }
  free(p);
}

void free_Imprima(Imprima p)
{
  switch(p->kind)
  {
  case is_Label4:
    free_Expressao(p->u.label4_.expressao_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Imprima!\n");
    exit(1);
  }
  free(p);
}

void free_Entrada(Entrada p)
{
  switch(p->kind)
  {
  case is_Label5:
    free_Identificador(p->u.label5_.identificador_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Entrada!\n");
    exit(1);
  }
  free(p);
}

void free_Modularizacao(Modularizacao p)
{
  switch(p->kind)
  {
  case is_Label6:
    free_IdentifierLabel(p->u.label6_.identifierlabel_);
    free_Instrucoes(p->u.label6_.instrucoes_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Modularizacao!\n");
    exit(1);
  }
  free(p);
}

void free_Expressao(Expressao p)
{
  switch(p->kind)
  {
  case is_Expressao1:
    free_Termo(p->u.expressao1_.termo_);
    break;

  case is_Expressao2:
    free_Expressao(p->u.expressao2_.expressao_);
    free_Termo(p->u.expressao2_.termo_);
    break;

  case is_Expressao3:
    free_Expressao(p->u.expressao3_.expressao_);
    free_Termo(p->u.expressao3_.termo_);
    break;

  case is_Expressao4:
    free_Expressao(p->u.expressao4_.expressao_);
    free_Termo(p->u.expressao4_.termo_);
    break;

  case is_Expressao5:
    free_Expressao(p->u.expressao5_.expressao_);
    free_Termo(p->u.expressao5_.termo_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Expressao!\n");
    exit(1);
  }
  free(p);
}

void free_Termo(Termo p)
{
  switch(p->kind)
  {
  case is_Termo1:
    free_Identificador(p->u.termo1_.identificador_);
    break;

  case is_Termo2:
    free_Identificador(p->u.termo2_.identificador_);
    free_Inteiro(p->u.termo2_.inteiro_);
    break;

  case is_TermoInteiro:
    free_Inteiro(p->u.termointeiro_.inteiro_);
    break;

  case is_TermoTexto:
    free_Texto(p->u.termotexto_.texto_);
    break;

  case is_Termo3:
    free_Identificador(p->u.termo3_.identificador_);
    free_Inteiro(p->u.termo3_.inteiro_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Termo!\n");
    exit(1);
  }
  free(p);
}

void free_Condicao(Condicao p)
{
  switch(p->kind)
  {
  case is_Condicao1:
    free_Expressao(p->u.condicao1_.expressao_1);
    free_Expressao(p->u.condicao1_.expressao_2);
    break;

  case is_Condicao2:
    free_Expressao(p->u.condicao2_.expressao_1);
    free_Expressao(p->u.condicao2_.expressao_2);
    break;

  case is_Condicao3:
    free_Expressao(p->u.condicao3_.expressao_1);
    free_Expressao(p->u.condicao3_.expressao_2);
    break;

  case is_Condicao4:
    free_Expressao(p->u.condicao4_.expressao_1);
    free_Expressao(p->u.condicao4_.expressao_2);
    break;

  case is_Condicao5:
    free_Expressao(p->u.condicao5_.expressao_1);
    free_Expressao(p->u.condicao5_.expressao_2);
    break;

  case is_Condicao6:
    free_Condicao(p->u.condicao6_.condicao_);
    break;

  case is_Condicao7:
    free_Condicao(p->u.condicao7_.condicao_);
    break;

  case is_Condicao8:
    free_Condicao(p->u.condicao8_.condicao_1);
    free_Condicao(p->u.condicao8_.condicao_2);
    break;

  case is_Condicao9:
    free_Condicao(p->u.condicao9_.condicao_1);
    free_Condicao(p->u.condicao9_.condicao_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Condicao!\n");
    exit(1);
  }
  free(p);
}

void free_Tipo(Tipo p)
{
  switch(p->kind)
  {
  case is_Tipo_int:
    break;

  case is_Tipo_texto:
    break;

  case is_Tipo1:
    free_IdentifierLabel(p->u.tipo1_.identifierlabel_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Tipo!\n");
    exit(1);
  }
  free(p);
}

void free_Identificador(Identificador p)
{
  switch(p->kind)
  {
  case is_Id:
    free_Letra(p->u.id_.letra_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Identificador!\n");
    exit(1);
  }
  free(p);
}

void free_Inteiro(Inteiro p)
{
  switch(p->kind)
  {
  case is_In:
    free_Digito(p->u.in_.digito_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Inteiro!\n");
    exit(1);
  }
  free(p);
}

void free_Real(Real p)
{
  switch(p->kind)
  {
  case is_Ir:
    free_Digito(p->u.ir_.digito_1);
    free_Digito(p->u.ir_.digito_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Real!\n");
    exit(1);
  }
  free(p);
}

void free_Chax(Chax p)
{
  switch(p->kind)
  {
  case is_Ch:
    free_Letra(p->u.ch_.letra_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Chax!\n");
    exit(1);
  }
  free(p);
}

void free_Texto(Texto p)
{
  switch(p->kind)
  {
  case is_It:
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Texto!\n");
    exit(1);
  }
  free(p);
}

void free_IdentifierLabel(IdentifierLabel p)
{
  switch(p->kind)
  {
  case is_Ie:
    free_Identificador(p->u.ie_.identificador_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing IdentifierLabel!\n");
    exit(1);
  }
  free(p);
}

void free_TypeType(TypeType p)
{
  switch(p->kind)
  {
  case is_TypeType11:
    break;

  case is_TypeType12:
    break;

  case is_TypeType13:
    free_IdentifierLabel(p->u.typetype13_.identifierlabel_);
    break;

  case is_TypeType21:
    break;

  case is_TypeType22:
    break;

  case is_TypeType23:
    free_IdentifierLabel(p->u.typetype23_.identifierlabel_);
    break;

  case is_TypeType31:
    break;

  case is_TypeType32:
    break;

  case is_TypeType33:
    free_IdentifierLabel(p->u.typetype33_.identifierlabel_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing TypeType!\n");
    exit(1);
  }
  free(p);
}

void free_Letra(Letra p)
{
  switch(p->kind)
  {
  case is_L:
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Letra!\n");
    exit(1);
  }
  free(p);
}

void free_Digito(Digito p)
{
  switch(p->kind)
  {
  case is_D:
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Digito!\n");
    exit(1);
  }
  free(p);
}

void free_Caractere(Caractere p)
{
  switch(p->kind)
  {
  case is_Ca:
    break;

  default:
    fprintf(stderr, "Error: bad kind field when freeing Caractere!\n");
    exit(1);
  }
  free(p);
}

