/* -*- c -*- File generated by the BNF Converter (bnfc 2.9.5). */

/* Parser definition to be used with Bison. */

/* Generate header file for lexer. */
%defines "Bison.h"

/* Reentrant parser */
%pure_parser
  /* From Bison 2.3b (2008): %define api.pure full */
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }

/* Turn on line/column tracking in the bnfc_grupo_lloc structure: */
%locations

/* Argument to the parser to be filled with the parsed tree. */
%parse-param { YYSTYPE *result }

%{
/* Begin C preamble code */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Absyn.h"

#define YYMAXDEPTH 10000000

/* The type yyscan_t is defined by flex, but we need it in the parser already. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE bnfc_grupo__scan_string(const char *str, yyscan_t scanner);
extern void bnfc_grupo__delete_buffer(YY_BUFFER_STATE buf, yyscan_t scanner);

extern void bnfc_grupo_lex_destroy(yyscan_t scanner);
extern char* bnfc_grupo_get_text(yyscan_t scanner);

extern yyscan_t bnfc_grupo__initialize_lexer(FILE * inp);

/* List reversal functions. */

/* End C preamble code */
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Programx programx_;
  Declaracoes declaracoes_;
  Declaracao declaracao_;
  StructDecl structdecl_;
  FieldDecl fielddecl_;
  PonteiraDecl ponteiradecl_;
  VetorDecl vetordecl_;
  Instrucoes instrucoes_;
  Instrucao instrucao_;
  Atribuicao atribuicao_;
  Comentario comentario_;
  DeclaracaoSe declaracaose_;
  LoopPara looppara_;
  Imprima imprima_;
  Entrada entrada_;
  Modularizacao modularizacao_;
  Expressao expressao_;
  Termo termo_;
  Condicao condicao_;
  Tipo tipo_;
  Identificador identificador_;
  Inteiro inteiro_;
  Real real_;
  Chax chax_;
  Texto texto_;
  IdentifierLabel identifierlabel_;
  TypeType typetype_;
  Letra letra_;
  Digito digito_;
  Caractere caractere_;
}

%{
void yyerror(YYLTYPE *loc, yyscan_t scanner, YYSTYPE *result, const char *msg)
{
  fprintf(stderr, "error: %d,%d: %s at %s\n",
    loc->first_line, loc->first_column, msg, bnfc_grupo_get_text(scanner));
}

int yyparse(yyscan_t scanner, YYSTYPE *result);

extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner);
%}

%token          _ERROR_
%token          _LPAREN            /* ( */
%token          _SYMB_18           /* (Letra */
%token          _RPAREN            /* ) */
%token          _STAR              /* * */
%token          _PLUS              /* + */
%token          _MINUS             /* - */
%token          _DOT               /* . */
%token          _SLASH             /* / */
%token          _DSLASH            /* // */
%token          _SEMI              /* ; */
%token          _LT                /* < */
%token          _LDARROW           /* <= */
%token          _EQ                /* = */
%token          _DEQ               /* == */
%token          _GT                /* > */
%token          _GTEQ              /* >= */
%token          _SYMB_21           /* Caractere* */
%token          _KW_Digito         /* Digito */
%token          _KW_SE             /* SE */
%token          _LBRACK            /* [ */
%token          _SYMB_23           /* [0-9] */
%token          _SYMB_24           /* [a-zA-Z0-9 */
%token          _SYMB_22           /* [a-zA-Z] */
%token          _RBRACK            /* ] */
%token          _KW_e              /* e */
%token          _KW_entrada        /* entrada */
%token          _KW_imprima        /* imprima */
%token          _KW_int            /* int */
%token          _KW_modularizacao  /* modularizacao */
%token          _KW_nao            /* nao */
%token          _KW_ou             /* ou */
%token          _KW_para           /* para */
%token          _KW_principal      /* principal */
%token          _KW_retorne        /* retorne */
%token          _KW_senao          /* senao */
%token          _KW_struct         /* struct */
%token          _KW_texto          /* texto */
%token          _LBRACE            /* { */
%token          _BAR               /* | */
%token          _RBRACE            /* } */
%token<_string> _STRING_
%token<_char>   _CHAR_

%type <programx_> Programx
%type <declaracoes_> Declaracoes
%type <declaracao_> Declaracao
%type <structdecl_> StructDecl
%type <fielddecl_> FieldDecl
%type <ponteiradecl_> PonteiraDecl
%type <vetordecl_> VetorDecl
%type <instrucoes_> Instrucoes
%type <instrucao_> Instrucao
%type <atribuicao_> Atribuicao
%type <comentario_> Comentario
%type <declaracaose_> DeclaracaoSe
%type <looppara_> LoopPara
%type <imprima_> Imprima
%type <entrada_> Entrada
%type <modularizacao_> Modularizacao
%type <expressao_> Expressao
%type <termo_> Termo
%type <condicao_> Condicao
%type <tipo_> Tipo
%type <identificador_> Identificador
%type <inteiro_> Inteiro
%type <real_> Real
%type <chax_> Chax
%type <texto_> Texto
%type <identifierlabel_> IdentifierLabel
%type <typetype_> TypeType1
%type <typetype_> TypeType2
%type <typetype_> TypeType3
%type <letra_> Letra
%type <digito_> Digito
%type <caractere_> Caractere

%start Programx

%%

Programx : _KW_int _KW_principal _LPAREN _RPAREN _LBRACE Declaracoes Instrucoes _KW_retorne Inteiro _SEMI _RBRACE _SEMI { $$ = make_Label1($6, $7, $9); result->programx_ = $$; }
;
Declaracoes : Declaracao Declaracoes _SEMI { $$ = make_Declaracoes1($1, $2); result->declaracoes_ = $$; }
;
Declaracao : Tipo Identificador _SEMI { $$ = make_Declaracao1($1, $2); result->declaracao_ = $$; }
  | StructDecl _SEMI { $$ = make_Declaracao2($1); result->declaracao_ = $$; }
  | PonteiraDecl _SEMI { $$ = make_Declaracao3($1); result->declaracao_ = $$; }
  | VetorDecl _SEMI { $$ = make_Declaracao4($1); result->declaracao_ = $$; }
  | Tipo Identificador _EQ Inteiro _SEMI { $$ = make_Declaracao5($1, $2, $4); result->declaracao_ = $$; }
  | Tipo Identificador _EQ Real _SEMI { $$ = make_Declaracao6($1, $2, $4); result->declaracao_ = $$; }
  | Tipo Identificador _EQ _CHAR_ _SEMI { $$ = make_Declaracao7($1, $2, $4); result->declaracao_ = $$; }
  | Tipo Identificador _EQ _STRING_ _SEMI { $$ = make_Declaracao8($1, $2, $4); result->declaracao_ = $$; }
  | StructDecl _SEMI { $$ = make_Declaracao9($1); result->declaracao_ = $$; }
  | PonteiraDecl _SEMI { $$ = make_Declaracao10($1); result->declaracao_ = $$; }
  | VetorDecl _SEMI { $$ = make_Declaracao11($1); result->declaracao_ = $$; }
;
StructDecl : _KW_struct IdentifierLabel _LBRACE FieldDecl _RBRACE _SEMI { $$ = make_E($2, $4); result->structdecl_ = $$; }
;
FieldDecl : TypeType1 IdentifierLabel _SEMI { $$ = make_F($1, $2); result->fielddecl_ = $$; }
;
PonteiraDecl : TypeType2 _STAR IdentifierLabel _SEMI { $$ = make_P($1, $3); result->ponteiradecl_ = $$; }
;
VetorDecl : TypeType3 IdentifierLabel _LBRACK Inteiro _RBRACK _SEMI { $$ = make_V($1, $2, $4); result->vetordecl_ = $$; }
;
Instrucoes : Instrucao Instrucoes _SEMI { $$ = make_Instrucoes1($1, $2); result->instrucoes_ = $$; }
;
Instrucao : Atribuicao _SEMI { $$ = make_Instrucao1($1); result->instrucao_ = $$; }
  | Modularizacao _SEMI { $$ = make_Instrucao2($1); result->instrucao_ = $$; }
;
Atribuicao : Identificador _EQ Expressao _SEMI { $$ = make_A($1, $3); result->atribuicao_ = $$; }
;
Comentario : _DSLASH _STRING_ _SEMI { $$ = make_Co($2); result->comentario_ = $$; }
;
DeclaracaoSe : _KW_SE _LPAREN Expressao _RPAREN _LBRACE Instrucoes _RBRACE _KW_senao _LBRACE Instrucoes _RBRACE _SEMI { $$ = make_Label2($3, $6, $10); result->declaracaose_ = $$; }
;
LoopPara : _KW_para _LPAREN Atribuicao _SEMI Condicao _SEMI Atribuicao _RPAREN _LBRACE Instrucoes _RBRACE _SEMI { $$ = make_Label3($3, $5, $7, $10); result->looppara_ = $$; }
;
Imprima : _KW_imprima _LPAREN Expressao _RPAREN _SEMI { $$ = make_Label4($3); result->imprima_ = $$; }
;
Entrada : _KW_entrada _LPAREN Identificador _RPAREN _SEMI { $$ = make_Label5($3); result->entrada_ = $$; }
;
Modularizacao : _KW_modularizacao IdentifierLabel _LPAREN _RPAREN _LBRACE Instrucoes _RBRACE _SEMI { $$ = make_Label6($2, $6); result->modularizacao_ = $$; }
;
Expressao : Termo _SEMI { $$ = make_Expressao1($1); result->expressao_ = $$; }
  | Expressao _PLUS Termo _SEMI { $$ = make_Expressao2($1, $3); result->expressao_ = $$; }
  | Expressao _MINUS Termo _SEMI { $$ = make_Expressao3($1, $3); result->expressao_ = $$; }
  | Expressao _STAR Termo _SEMI { $$ = make_Expressao4($1, $3); result->expressao_ = $$; }
  | Expressao _SLASH Termo _SEMI { $$ = make_Expressao5($1, $3); result->expressao_ = $$; }
;
Termo : Identificador _SEMI { $$ = make_Termo1($1); result->termo_ = $$; }
  | Identificador _LBRACK Inteiro _RBRACK _SEMI { $$ = make_Termo2($1, $3); result->termo_ = $$; }
  | Inteiro { $$ = make_TermoInteiro($1); result->termo_ = $$; }
  | Texto { $$ = make_TermoTexto($1); result->termo_ = $$; }
  | Identificador _LBRACK Inteiro _RBRACK _SEMI { $$ = make_Termo3($1, $3); result->termo_ = $$; }
;
Condicao : Expressao _GT Expressao _SEMI { $$ = make_Condicao1($1, $3); result->condicao_ = $$; }
  | Expressao _GTEQ Expressao _SEMI { $$ = make_Condicao2($1, $3); result->condicao_ = $$; }
  | Expressao _LT Expressao _SEMI { $$ = make_Condicao3($1, $3); result->condicao_ = $$; }
  | Expressao _LDARROW Expressao _SEMI { $$ = make_Condicao4($1, $3); result->condicao_ = $$; }
  | Expressao _DEQ Expressao _SEMI { $$ = make_Condicao5($1, $3); result->condicao_ = $$; }
  | _KW_nao Condicao _SEMI { $$ = make_Condicao6($2); result->condicao_ = $$; }
  | _LPAREN Condicao _RPAREN _SEMI { $$ = make_Condicao7($2); result->condicao_ = $$; }
  | Condicao _KW_e Condicao _SEMI { $$ = make_Condicao8($1, $3); result->condicao_ = $$; }
  | Condicao _KW_ou Condicao _SEMI { $$ = make_Condicao9($1, $3); result->condicao_ = $$; }
;
Tipo : _KW_int { $$ = make_Tipo_int(); result->tipo_ = $$; }
  | _KW_texto { $$ = make_Tipo_texto(); result->tipo_ = $$; }
  | _KW_struct IdentifierLabel _SEMI { $$ = make_Tipo1($2); result->tipo_ = $$; }
;
Identificador : Letra _SYMB_18 _BAR _KW_Digito _RPAREN _SEMI { $$ = make_Id($1); result->identificador_ = $$; }
;
Inteiro : Digito _SEMI { $$ = make_In($1); result->inteiro_ = $$; }
;
Real : Digito _DOT Digito _SEMI { $$ = make_Ir($1, $3); result->real_ = $$; }
;
Chax : Letra _SEMI { $$ = make_Ch($1); result->chax_ = $$; }
;
Texto : _SYMB_21 _SEMI { $$ = make_It(); result->texto_ = $$; }
;
IdentifierLabel : Identificador { $$ = make_Ie($1); result->identifierlabel_ = $$; }
;
TypeType1 : _KW_int _SEMI { $$ = make_TypeType11(); result->typetype_ = $$; }
  | _KW_texto _SEMI { $$ = make_TypeType12(); result->typetype_ = $$; }
  | _KW_struct IdentifierLabel _SEMI { $$ = make_TypeType13($2); result->typetype_ = $$; }
;
TypeType2 : _KW_int _SEMI { $$ = make_TypeType21(); result->typetype_ = $$; }
  | _KW_texto _SEMI { $$ = make_TypeType22(); result->typetype_ = $$; }
  | _KW_struct IdentifierLabel _SEMI { $$ = make_TypeType23($2); result->typetype_ = $$; }
;
TypeType3 : _KW_int _SEMI { $$ = make_TypeType31(); result->typetype_ = $$; }
  | _KW_texto _SEMI { $$ = make_TypeType32(); result->typetype_ = $$; }
  | _KW_struct IdentifierLabel _SEMI { $$ = make_TypeType33($2); result->typetype_ = $$; }
;
Letra : _SYMB_22 _SEMI { $$ = make_L(); result->letra_ = $$; }
;
Digito : _SYMB_23 _SEMI { $$ = make_D(); result->digito_ = $$; }
;
Caractere : _SYMB_24 _RBRACK _SEMI { $$ = make_Ca(); result->caractere_ = $$; }
;

%%


/* Entrypoint: parse Programx from file. */
Programx pProgramx(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.programx_;
  }
}

/* Entrypoint: parse Programx from string. */
Programx psProgramx(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.programx_;
  }
}

/* Entrypoint: parse Declaracoes from file. */
Declaracoes pDeclaracoes(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declaracoes_;
  }
}

/* Entrypoint: parse Declaracoes from string. */
Declaracoes psDeclaracoes(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declaracoes_;
  }
}

/* Entrypoint: parse Declaracao from file. */
Declaracao pDeclaracao(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declaracao_;
  }
}

/* Entrypoint: parse Declaracao from string. */
Declaracao psDeclaracao(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declaracao_;
  }
}

/* Entrypoint: parse StructDecl from file. */
StructDecl pStructDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.structdecl_;
  }
}

/* Entrypoint: parse StructDecl from string. */
StructDecl psStructDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.structdecl_;
  }
}

/* Entrypoint: parse FieldDecl from file. */
FieldDecl pFieldDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.fielddecl_;
  }
}

/* Entrypoint: parse FieldDecl from string. */
FieldDecl psFieldDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.fielddecl_;
  }
}

/* Entrypoint: parse PonteiraDecl from file. */
PonteiraDecl pPonteiraDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ponteiradecl_;
  }
}

/* Entrypoint: parse PonteiraDecl from string. */
PonteiraDecl psPonteiraDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ponteiradecl_;
  }
}

/* Entrypoint: parse VetorDecl from file. */
VetorDecl pVetorDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.vetordecl_;
  }
}

/* Entrypoint: parse VetorDecl from string. */
VetorDecl psVetorDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.vetordecl_;
  }
}

/* Entrypoint: parse Instrucoes from file. */
Instrucoes pInstrucoes(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.instrucoes_;
  }
}

/* Entrypoint: parse Instrucoes from string. */
Instrucoes psInstrucoes(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.instrucoes_;
  }
}

/* Entrypoint: parse Instrucao from file. */
Instrucao pInstrucao(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.instrucao_;
  }
}

/* Entrypoint: parse Instrucao from string. */
Instrucao psInstrucao(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.instrucao_;
  }
}

/* Entrypoint: parse Atribuicao from file. */
Atribuicao pAtribuicao(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.atribuicao_;
  }
}

/* Entrypoint: parse Atribuicao from string. */
Atribuicao psAtribuicao(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.atribuicao_;
  }
}

/* Entrypoint: parse Comentario from file. */
Comentario pComentario(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.comentario_;
  }
}

/* Entrypoint: parse Comentario from string. */
Comentario psComentario(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.comentario_;
  }
}

/* Entrypoint: parse DeclaracaoSe from file. */
DeclaracaoSe pDeclaracaoSe(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declaracaose_;
  }
}

/* Entrypoint: parse DeclaracaoSe from string. */
DeclaracaoSe psDeclaracaoSe(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declaracaose_;
  }
}

/* Entrypoint: parse LoopPara from file. */
LoopPara pLoopPara(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.looppara_;
  }
}

/* Entrypoint: parse LoopPara from string. */
LoopPara psLoopPara(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.looppara_;
  }
}

/* Entrypoint: parse Imprima from file. */
Imprima pImprima(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.imprima_;
  }
}

/* Entrypoint: parse Imprima from string. */
Imprima psImprima(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.imprima_;
  }
}

/* Entrypoint: parse Entrada from file. */
Entrada pEntrada(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.entrada_;
  }
}

/* Entrypoint: parse Entrada from string. */
Entrada psEntrada(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.entrada_;
  }
}

/* Entrypoint: parse Modularizacao from file. */
Modularizacao pModularizacao(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.modularizacao_;
  }
}

/* Entrypoint: parse Modularizacao from string. */
Modularizacao psModularizacao(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.modularizacao_;
  }
}

/* Entrypoint: parse Expressao from file. */
Expressao pExpressao(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.expressao_;
  }
}

/* Entrypoint: parse Expressao from string. */
Expressao psExpressao(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.expressao_;
  }
}

/* Entrypoint: parse Termo from file. */
Termo pTermo(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.termo_;
  }
}

/* Entrypoint: parse Termo from string. */
Termo psTermo(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.termo_;
  }
}

/* Entrypoint: parse Condicao from file. */
Condicao pCondicao(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.condicao_;
  }
}

/* Entrypoint: parse Condicao from string. */
Condicao psCondicao(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.condicao_;
  }
}

/* Entrypoint: parse Tipo from file. */
Tipo pTipo(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.tipo_;
  }
}

/* Entrypoint: parse Tipo from string. */
Tipo psTipo(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.tipo_;
  }
}

/* Entrypoint: parse Identificador from file. */
Identificador pIdentificador(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identificador_;
  }
}

/* Entrypoint: parse Identificador from string. */
Identificador psIdentificador(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identificador_;
  }
}

/* Entrypoint: parse Inteiro from file. */
Inteiro pInteiro(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.inteiro_;
  }
}

/* Entrypoint: parse Inteiro from string. */
Inteiro psInteiro(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.inteiro_;
  }
}

/* Entrypoint: parse Real from file. */
Real pReal(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.real_;
  }
}

/* Entrypoint: parse Real from string. */
Real psReal(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.real_;
  }
}

/* Entrypoint: parse Chax from file. */
Chax pChax(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.chax_;
  }
}

/* Entrypoint: parse Chax from string. */
Chax psChax(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.chax_;
  }
}

/* Entrypoint: parse Texto from file. */
Texto pTexto(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.texto_;
  }
}

/* Entrypoint: parse Texto from string. */
Texto psTexto(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.texto_;
  }
}

/* Entrypoint: parse IdentifierLabel from file. */
IdentifierLabel pIdentifierLabel(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identifierlabel_;
  }
}

/* Entrypoint: parse IdentifierLabel from string. */
IdentifierLabel psIdentifierLabel(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identifierlabel_;
  }
}

/* Entrypoint: parse TypeType from file. */
TypeType pTypeType1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typetype_;
  }
}

/* Entrypoint: parse TypeType from string. */
TypeType psTypeType1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typetype_;
  }
}

/* Entrypoint: parse TypeType from file. */
TypeType pTypeType2(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typetype_;
  }
}

/* Entrypoint: parse TypeType from string. */
TypeType psTypeType2(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typetype_;
  }
}

/* Entrypoint: parse TypeType from file. */
TypeType pTypeType3(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typetype_;
  }
}

/* Entrypoint: parse TypeType from string. */
TypeType psTypeType3(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typetype_;
  }
}

/* Entrypoint: parse Letra from file. */
Letra pLetra(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.letra_;
  }
}

/* Entrypoint: parse Letra from string. */
Letra psLetra(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.letra_;
  }
}

/* Entrypoint: parse Digito from file. */
Digito pDigito(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.digito_;
  }
}

/* Entrypoint: parse Digito from string. */
Digito psDigito(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.digito_;
  }
}

/* Entrypoint: parse Caractere from file. */
Caractere pCaractere(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.caractere_;
  }
}

/* Entrypoint: parse Caractere from string. */
Caractere psCaractere(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = bnfc_grupo__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = bnfc_grupo__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  bnfc_grupo__delete_buffer(buf, scanner);
  bnfc_grupo_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.caractere_;
  }
}



